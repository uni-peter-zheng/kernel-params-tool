<?xml version="1.0" encoding="utf-8"?><params>
	<param locked="0" path="/proc/sys/fs/inode-state">
		<subparams>
			
		<subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams>
		
	<info>As with file handles, the kernel allocates the inode structures
dynamically, but can't free them yet.

The value in inode-max denotes the maximum number of inode
handlers. This value should be 3-4 times larger than the value
in file-max, since stdin, stdout and network sockets also
need an inode struct to handle them. When you regularly run
out of inodes, you need to increase this value.

The file inode-nr contains the first two items from
inode-state, so we'll skip to that file...

Inode-state contains three actual numbers and four dummies.
The actual numbers are, in order of appearance, nr_inodes,
nr_free_inodes and preshrink.

Nr_inodes stands for the number of inodes the system has
allocated, this can be slightly more than inode-max because
Linux allocates them one pageful at a time.

Nr_free_inodes represents the number of free inodes (?) and
preshrink is nonzero when the nr_inodes &gt; inode-max and the
system needs to prune the inode list instead of allocating
more.</info></param>
	<param locked="0" path="/proc/sys/kernel/printk">
		<subparams>
			
			
		<subparam index="1" max="7" maxlen="0" min="0" name="(noname2)" type="number_range"><subinfo/></subparam><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams>	
		
	<info>The four values in printk denote: console_loglevel,
default_message_loglevel, minimum_console_loglevel and
default_console_loglevel respectively.

These values influence printk() behavior when printing or
logging error messages. See 'man 2 syslog' for more info on
the different loglevels.

- console_loglevel: messages with a higher priority than
  this will be printed to the console
- default_message_loglevel: messages without an explicit priority
  will be printed with this priority
- minimum_console_loglevel: minimum (highest) value to which
  console_loglevel can be set
- default_console_loglevel: default value for console_loglevel</info></param>
<param locked="0" path="/proc/sys/kernel/acct"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>highwater lowwater frequency

If BSD-style process accounting is enabled these values control
its behaviour. If free space on filesystem where the log lives
goes below &lt;lowwater&gt;% accounting suspends. If free space gets
above &lt;highwater&gt;% accounting resumes. &lt;Frequency&gt; determines
how often do we check the amount of free space (value is in
seconds). Default:
4 2 30
That is, suspend accounting if there left &lt;= 2% free; resume it
if we got &gt;=4%; consider information about amount of free space
valid for 30 seconds.</info></param><param locked="0" path="/proc/sys/kernel/auto_msgmni"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This variable has no effect and may be removed in future kernel
releases. Reading it always returns 0.
Up to Linux 3.17, it enabled/disabled automatic recomputing of msgmni
upon memory add/remove or upon ipc namespace creation/removal.
Echoing &quot;1&quot; into this file enabled msgmni automatic recomputing.
Echoing &quot;0&quot; turned it off. auto_msgmni default value was 1.</info></param><param locked="0" path="/proc/sys/kernel/cad_pid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/cap_last_cap"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Highest valid capability of the running kernel.  Exports
CAP_LAST_CAP from the kernel.</info></param><param locked="0" path="/proc/sys/kernel/core_pattern"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>core_pattern is used to specify a core dumpfile pattern name.
. max length 128 characters; default value is &quot;core&quot;
. core_pattern is used as a pattern template for the output filename;
  certain string patterns (beginning with '%') are substituted with
  their actual values.
. backward compatibility with core_uses_pid:
	If core_pattern does not include &quot;%p&quot; (default does not)
	and core_uses_pid is set, then .PID will be appended to
	the filename.
. corename format specifiers:
	%&lt;NUL&gt;	'%' is dropped
	%%	output one '%'
	%p	pid
	%P	global pid (init PID namespace)
	%i	tid
	%I	global tid (init PID namespace)
	%u	uid (in initial user namespace)
	%g	gid (in initial user namespace)
	%d	dump mode, matches PR_SET_DUMPABLE and
		/proc/sys/fs/suid_dumpable
	%s	signal number
	%t	UNIX time of dump
	%h	hostname
	%e	executable filename (may be shortened)
	%E	executable path
	%&lt;OTHER&gt; both are dropped
. If the first character of the pattern is a '|', the kernel will treat
  the rest of the pattern as a command to run.  The core dump will be
  written to the standard input of that program instead of to a file.
</info></param><param locked="0" path="/proc/sys/kernel/core_pipe_limit"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This sysctl is only applicable when core_pattern is configured to pipe
core files to a user space helper (when the first character of
core_pattern is a '|', see above).  When collecting cores via a pipe
to an application, it is occasionally useful for the collecting
application to gather data about the crashing process from its
/proc/pid directory.  In order to do this safely, the kernel must wait
for the collecting process to exit, so as not to remove the crashing
processes proc files prematurely.  This in turn creates the
possibility that a misbehaving userspace collecting process can block
the reaping of a crashed process simply by never exiting.  This sysctl
defends against that.  It defines how many concurrent crashing
processes may be piped to user space applications in parallel.  If
this value is exceeded, then those crashing processes above that value
are noted via the kernel log and their cores are skipped.  0 is a
special value, indicating that unlimited processes may be captured in
parallel, but that no waiting will take place (i.e. the collecting
process is not guaranteed access to /proc/&lt;crashing pid&gt;/).  This
value defaults to 0.</info></param><param locked="0" path="/proc/sys/kernel/core_uses_pid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The default coredump filename is &quot;core&quot;.  By setting
core_uses_pid to 1, the coredump filename becomes core.PID.
If core_pattern does not include &quot;%p&quot; (default does not)
and core_uses_pid is set, then .PID will be appended to
the filename.</info></param><param locked="0" path="/proc/sys/kernel/ctrl-alt-del"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>When the value in this file is 0, ctrl-alt-del is trapped and
sent to the init(1) program to handle a graceful restart.
When, however, the value is &gt; 0, Linux's reaction to a Vulcan
Nerve Pinch (tm) will be an immediate reboot, without even
syncing its dirty buffers.

Note: when a program (like dosemu) has the keyboard in 'raw'
mode, the ctrl-alt-del is intercepted by the program before it
ever reaches the kernel tty layer, and it's up to the program
to decide what to do with it.</info></param><param locked="0" path="/proc/sys/kernel/dmesg_restrict"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This toggle indicates whether unprivileged users are prevented
from using dmesg(8) to view messages from the kernel's log buffer.
When dmesg_restrict is set to (0) there are no restrictions. When
dmesg_restrict is set set to (1), users must have CAP_SYSLOG to use
dmesg(8).

The kernel config option CONFIG_SECURITY_DMESG_RESTRICT sets the
default value of dmesg_restrict.</info></param><param locked="0" path="/proc/sys/kernel/domainname"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>These files can be used to set the NIS/YP domainname and the
hostname of your box in exactly the same way as the commands
domainname and hostname, i.e.:
# echo &quot;darkstar&quot; &gt; /proc/sys/kernel/hostname
# echo &quot;mydomain&quot; &gt; /proc/sys/kernel/domainname
has the same effect as
# hostname &quot;darkstar&quot;
# domainname &quot;mydomain&quot;

Note, however, that the classic darkstar.frop.org has the
hostname &quot;darkstar&quot; and DNS (Internet Domain Name Server)
domainname &quot;frop.org&quot;, not to be confused with the NIS (Network
Information Service) or YP (Yellow Pages) domainname. These two
domain names are in general different. For a detailed discussion
see the hostname(1) man page.</info></param><param locked="0" path="/proc/sys/kernel/ftrace_dump_on_oops"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ftrace will dump the trace buffers on oops.
If no parameter is passed, ftrace will dump
buffers of all CPUs, but if you pass orig_cpu, it will
dump only the buffer of the CPU that triggered the
oops.</info></param><param locked="0" path="/proc/sys/kernel/hostname"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>These files can be used to set the NIS/YP domainname and the
hostname of your box in exactly the same way as the commands
domainname and hostname, i.e.:
# echo &quot;darkstar&quot; &gt; /proc/sys/kernel/hostname
# echo &quot;mydomain&quot; &gt; /proc/sys/kernel/domainname
has the same effect as
# hostname &quot;darkstar&quot;
# domainname &quot;mydomain&quot;

Note, however, that the classic darkstar.frop.org has the
hostname &quot;darkstar&quot; and DNS (Internet Domain Name Server)
domainname &quot;frop.org&quot;, not to be confused with the NIS (Network
Information Service) or YP (Yellow Pages) domainname. These two
domain names are in general different. For a detailed discussion
see the hostname(1) man page.</info></param><param locked="0" path="/proc/sys/kernel/hotplug"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Path for the hotplug policy agent.
Default value is &quot;/sbin/hotplug&quot;.</info></param><param locked="0" path="/proc/sys/kernel/hung_task_check_count"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The upper bound on the number of tasks that are checked.
This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.</info></param><param locked="0" path="/proc/sys/kernel/hung_task_panic"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Controls the kernel's behavior when a hung task is detected.
This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.

0: continue operation. This is the default behavior.

1: panic immediately.</info></param><param locked="0" path="/proc/sys/kernel/hung_task_timeout_secs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Check interval. When a task in D state did not get scheduled
for more than this value report a warning.
This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.

0: means infinite timeout - no checking done.
Possible values to set are in range {0..LONG_MAX/HZ}.</info></param><param locked="0" path="/proc/sys/kernel/hung_task_warnings"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The maximum number of warnings to report. During a check interval
if a hung task is detected, this value is decreased by 1.
When this value reaches 0, no more warnings will be reported.
This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.

-1: report an infinite number of warnings.</info></param><param locked="0" path="/proc/sys/kernel/kexec_load_disabled"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>A toggle indicating if the kexec_load syscall has been disabled. This
value defaults to 0 (false: kexec_load enabled), but can be set to 1
(true: kexec_load disabled). Once true, kexec can no longer be used, and
the toggle cannot be set back to false. This allows a kexec image to be
loaded before disabling the syscall, allowing a system to set up (and
later use) an image without it being altered. Generally used together
with the &quot;modules_disabled&quot; sysctl.</info></param><param locked="0" path="/proc/sys/kernel/modprobe"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>In almost all distributions, the kernel asks for modules which don't
exist, such as &quot;net-pf-10&quot; or whatever.  Changing &quot;modprobe -q&quot; to
&quot;succeed&quot; in this case is hacky and breaks some setups, and also we
want to know if it failed for the fallback code for old aliases in
fs/char_dev.c, for example.

In the past a debugging message which would fill people's logs was
emitted.  This debugging message has been removed.  The correct way
of debugging module problems is something like this:

echo '#! /bin/sh' &gt; /tmp/modprobe
echo 'echo &quot;$@&quot; &gt;&gt; /tmp/modprobe.log' &gt;&gt; /tmp/modprobe
echo 'exec /sbin/modprobe &quot;$@&quot;' &gt;&gt; /tmp/modprobe
chmod a+x /tmp/modprobe
echo /tmp/modprobe &gt; /proc/sys/kernel/modprobe

Note that the above applies only when the *kernel* is requesting
that the module be loaded -- it won't have any effect if that module
is being loaded explicitly using &quot;modprobe&quot; from userspace.</info></param><param locked="0" path="/proc/sys/kernel/modules_disabled"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>In almost all distributions, the kernel asks for modules which don't
exist, such as &quot;net-pf-10&quot; or whatever.  Changing &quot;modprobe -q&quot; to
&quot;succeed&quot; in this case is hacky and breaks some setups, and also we
want to know if it failed for the fallback code for old aliases in
fs/char_dev.c, for example.

In the past a debugging message which would fill people's logs was
emitted.  This debugging message has been removed.  The correct way
of debugging module problems is something like this:

echo '#! /bin/sh' &gt; /tmp/modprobe
echo 'echo &quot;$@&quot; &gt;&gt; /tmp/modprobe.log' &gt;&gt; /tmp/modprobe
echo 'exec /sbin/modprobe &quot;$@&quot;' &gt;&gt; /tmp/modprobe
chmod a+x /tmp/modprobe
echo /tmp/modprobe &gt; /proc/sys/kernel/modprobe

Note that the above applies only when the *kernel* is requesting
that the module be loaded -- it won't have any effect if that module
is being loaded explicitly using &quot;modprobe&quot; from userspace.</info></param><param locked="0" path="/proc/sys/kernel/msgmax"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/msgmnb"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/msgmni"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/ngroups_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/nmi_watchdog"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This parameter can be used to control the NMI watchdog
(i.e. the hard lockup detector) on x86 systems.

   0 - disable the hard lockup detector
   1 - enable the hard lockup detector

The hard lockup detector monitors each CPU for its ability to respond to
timer interrupts. The mechanism utilizes CPU performance counter registers
that are programmed to generate Non-Maskable Interrupts (NMIs) periodically
while a CPU is busy. Hence, the alternative name 'NMI watchdog'.

The NMI watchdog is disabled by default if the kernel is running as a guest
in a KVM virtual machine. This default can be overridden by adding

   nmi_watchdog=1

to the guest kernel command line (see Documentation/kernel-parameters.txt).</info></param><param locked="0" path="/proc/sys/kernel/osrelease"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info># cat osrelease
2.1.88
# cat ostype
Linux
# cat version
#5 Wed Feb 25 21:49:24 MET 1998

The files osrelease and ostype should be clear enough. Version
needs a little more clarification however. The '#5' means that
this is the fifth kernel built from this source base and the
date behind it indicates the time the kernel was built.
The only way to tune these values is to rebuild the kernel :-)</info></param><param locked="0" path="/proc/sys/kernel/ostype"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info># cat osrelease
2.1.88
# cat ostype
Linux
# cat version
#5 Wed Feb 25 21:49:24 MET 1998

The files osrelease and ostype should be clear enough. Version
needs a little more clarification however. The '#5' means that
this is the fifth kernel built from this source base and the
date behind it indicates the time the kernel was built.
The only way to tune these values is to rebuild the kernel :-)</info></param><param locked="0" path="/proc/sys/kernel/overflowgid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>if your architecture did not always support 32-bit UIDs (i.e. arm,
i386, m68k, sh, and sparc32), a fixed UID and GID will be returned to
applications that use the old 16-bit UID/GID system calls, if the
actual UID or GID would exceed 65535.

These sysctls allow you to change the value of the fixed UID and GID.
The default is 65534.</info></param><param locked="0" path="/proc/sys/kernel/overflowuid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>if your architecture did not always support 32-bit UIDs (i.e. arm,
i386, m68k, sh, and sparc32), a fixed UID and GID will be returned to
applications that use the old 16-bit UID/GID system calls, if the
actual UID or GID would exceed 65535.

These sysctls allow you to change the value of the fixed UID and GID.
The default is 65534.</info></param><param locked="0" path="/proc/sys/kernel/panic"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The value in this file represents the number of seconds the kernel
waits before rebooting on a panic. When you use the software watchdog,
the recommended setting is 60.</info></param><param locked="0" path="/proc/sys/kernel/panic_on_oops"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Controls the kernel's behaviour when an oops or BUG is encountered.

0: try to continue operation

1: panic immediately.  If the `panic' sysctl is also non-zero then the
   machine will be rebooted.</info></param><param locked="0" path="/proc/sys/kernel/panic_on_warn"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Calls panic() in the WARN() path when set to 1.  This is useful to avoid
a kernel rebuild when attempting to kdump at the location of a WARN().

0: only WARN(), default behaviour.

1: call panic() after printing out WARN() location.</info></param><param locked="0" path="/proc/sys/kernel/perf_cpu_time_max_percent"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Hints to the kernel how much CPU time it should be allowed to
use to handle perf sampling events.  If the perf subsystem
is informed that its samples are exceeding this limit, it
will drop its sampling frequency to attempt to reduce its CPU
usage.

Some perf sampling happens in NMIs.  If these samples
unexpectedly take too long to execute, the NMIs can become
stacked up next to each other so much that nothing else is
allowed to execute.

0: disable the mechanism.  Do not monitor or correct perf's
   sampling rate no matter how CPU time it takes.

1-100: attempt to throttle perf's sample rate to this
   percentage of CPU.  Note: the kernel calculates an
   &quot;expected&quot; length of each sample event.  100 here means
   100% of that expected length.  Even if this is set to
   100, you may still see sample throttling if this
   length is exceeded.  Set to 0 if you truly do not care
   how much CPU is consumed.</info></param><param locked="0" path="/proc/sys/kernel/pid_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>PID allocation wrap value.  When the kernel's next PID value
reaches this value, it wraps back to a minimum PID value.
PIDs of value pid_max or larger are not allocated.</info></param><param locked="0" path="/proc/sys/kernel/poweroff_cmd"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/powersave-nap"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>If set, Linux-PPC will use the 'nap' mode of powersaving,
otherwise the 'doze' mode will be used.</info></param><param locked="0" path="/proc/sys/kernel/printk_delay"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Delay each printk message in printk_delay milliseconds

Value from 0 - 10000 is allowed.</info></param><param locked="0" path="/proc/sys/kernel/printk_ratelimit"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Some warning messages are rate limited. printk_ratelimit specifies
the minimum length of time between these messages (in jiffies), by
default we allow one every 5 seconds.

A value of 0 will disable rate limiting.</info></param><param locked="0" path="/proc/sys/kernel/printk_ratelimit_burst"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>While long term we enforce one message per printk_ratelimit
seconds, we do allow a burst of messages to pass through.
printk_ratelimit_burst specifies the number of messages we can
send before ratelimiting kicks in.</info></param><param locked="0" path="/proc/sys/kernel/randomize_va_space"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This option can be used to select the type of process address
space randomization that is used in the system, for architectures
that support this feature.

0 - Turn the process address space randomization off.  This is the
    default for architectures that do not support this feature anyways,
    and kernels that are booted with the &quot;norandmaps&quot; parameter.

1 - Make the addresses of mmap base, stack and VDSO page randomized.
    This, among other things, implies that shared libraries will be
    loaded to random addresses.  Also for PIE-linked binaries, the
    location of code start is randomized.  This is the default if the
    CONFIG_COMPAT_BRK option is enabled.

2 - Additionally enable heap randomization.  This is the default if
    CONFIG_COMPAT_BRK is disabled.

    There are a few legacy applications out there (such as some ancient
    versions of libc.so.5 from 1996) that assume that brk area starts
    just after the end of the code+bss.  These applications break when
    start of the brk area is randomized.  There are however no known
    non-legacy applications that would be broken this way, so for most
    systems it is safe to choose full randomization.

    Systems with ancient and/or broken binaries should be configured
    with CONFIG_COMPAT_BRK enabled, which excludes the heap from process
    address space randomization.</info></param><param locked="0" path="/proc/sys/kernel/real-root-dev"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams>
<info>The following mechanism was used before the introduction of pivot_root.
Current kernels still support it, but you should _not_ rely on its
continued availability.

It works by mounting the &quot;real&quot; root device (i.e. the one set with rdev
in the kernel image or with root=... at the boot command line) as the
root file system when linuxrc exits. The initrd file system is then
unmounted, or, if it is still busy, moved to a directory /initrd, if
such a directory exists on the new root file system.

In order to use this mechanism, you do not have to specify the boot
command options root, init, or rw. (If specified, they will affect
the real root file system, not the initrd environment.)
  
If /proc is mounted, the &quot;real&quot; root device can be changed from within
linuxrc by writing the number of the new root FS device to the special
file /proc/sys/kernel/real-root-dev, e.g.

  # echo 0x301 &gt;/proc/sys/kernel/real-root-dev

Note that the mechanism is incompatible with NFS and similar file
systems.

This old, deprecated mechanism is commonly called &quot;change_root&quot;, while
the new, supported mechanism is called &quot;pivot_root&quot;.</info></param><param locked="0" path="/proc/sys/kernel/sched_autogroup_enabled"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/sched_child_runs_first"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/sem"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/shmall"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This parameter sets the total amount of shared memory pages that
can be used system wide. Hence, SHMALL should always be at least
ceil(shmmax/PAGE_SIZE).

If you are not sure what the default PAGE_SIZE is on your Linux
system, you can run the following command:

# getconf PAGE_SIZE</info></param><param locked="0" path="/proc/sys/kernel/shmmax"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This value can be used to query and set the run time limit
on the maximum shared memory segment size that can be created.
Shared memory segments up to 1Gb are now supported in the
kernel.  This value defaults to SHMMAX.
</info></param><param locked="0" path="/proc/sys/kernel/shmmni"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info/></param><param locked="0" path="/proc/sys/kernel/shm_rmid_forced"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Linux lets you set resource limits, including how much memory one
process can consume, via setrlimit(2).  Unfortunately, shared memory
segments are allowed to exist without association with any process, and
thus might not be counted against any resource limits.  If enabled,
shared memory segments are automatically destroyed when their attach
count becomes zero after a detach or a process termination.  It will
also destroy segments that were created, but never attached to, on exit
from the process.  The only use left for IPC_RMID is to immediately
destroy an unattached segment.  Of course, this breaks the way things are
defined, so some applications might stop working.  Note that this
feature will do you no good unless you also configure your resource
limits (in particular, RLIMIT_AS and RLIMIT_NPROC).  Most systems don't
need this.

Note that if you change this from 0 to 1, already created segments
without users and with a dead originative process will be destroyed.</info></param><param locked="0" path="/proc/sys/kernel/softlockup_panic"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>kernel Should the soft-lockup detector generate panics.
Format: &lt;integer&gt;</info></param><param locked="0" path="/proc/sys/kernel/sysrq"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>You need to say &quot;yes&quot; to 'Magic SysRq key (CONFIG_MAGIC_SYSRQ)' when
configuring the kernel. When running a kernel with SysRq compiled in,
/proc/sys/kernel/sysrq controls the functions allowed to be invoked via
the SysRq key. The default value in this file is set by the
CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE config symbol, which itself defaults
to 1. Here is the list of possible values in /proc/sys/kernel/sysrq:
   0 - disable sysrq completely
   1 - enable all functions of sysrq
  &gt;1 - bitmask of allowed sysrq functions (see below for detailed function
       description):
          2 =   0x2 - enable control of console logging level
          4 =   0x4 - enable control of keyboard (SAK, unraw)
          8 =   0x8 - enable debugging dumps of processes etc.
         16 =  0x10 - enable sync command
         32 =  0x20 - enable remount read-only
         64 =  0x40 - enable signalling of processes (term, kill, oom-kill)
        128 =  0x80 - allow reboot/poweroff
        256 = 0x100 - allow nicing of all RT tasks

You can set the value in the file by the following command:
    echo &quot;number&quot; &gt;/proc/sys/kernel/sysrq

The number may be written here either as decimal or as hexadecimal
with the 0x prefix. CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE must always be
written in hexadecimal.

Note that the value of /proc/sys/kernel/sysrq influences only the invocation
via a keyboard. Invocation of any operation via /proc/sysrq-trigger is always
allowed (by a user with admin privileges).</info></param><param locked="0" path="/proc/sys/kernel/tainted"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Non-zero if the kernel has been tainted.  Numeric values, which
can be ORed together:

   1 - A module with a non-GPL license has been loaded, this
       includes modules with no license.
       Set by modutils &gt;= 2.4.9 and module-init-tools.
   2 - A module was force loaded by insmod -f.
       Set by modutils &gt;= 2.4.9 and module-init-tools.
   4 - Unsafe SMP processors: SMP with CPUs not designed for SMP.
   8 - A module was forcibly unloaded from the system by rmmod -f.
  16 - A hardware machine check error occurred on the system.
  32 - A bad page was discovered on the system.
  64 - The user has asked that the system be marked &quot;tainted&quot;.  This
       could be because they are running software that directly modifies
       the hardware, or for other reasons.
 128 - The system has died.
 256 - The ACPI DSDT has been overridden with one supplied by the user
        instead of using the one provided by the hardware.
 512 - A kernel warning has occurred.
1024 - A module from drivers/staging was loaded.
2048 - The system is working around a severe firmware bug.
4096 - An out-of-tree module has been loaded.
8192 - An unsigned module has been loaded in a kernel supporting module
       signature.
16384 - A soft lockup has previously occurred on the system.</info></param><param locked="0" path="/proc/sys/kernel/threads-max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This value controls the maximum number of threads that can be created
using fork().

During initialization the kernel sets this value such that even if the
maximum number of threads is created, the thread structures occupy only
a part (1/8th) of the available RAM pages.

The minimum value that can be written to threads-max is 20.
The maximum value that can be written to threads-max is given by the
constant FUTEX_TID_MASK (0x3fffffff).
If a value outside of this range is written to threads-max an error
EINVAL occurs.

The value written is checked against the available RAM pages. If the
thread structures would occupy too much (more than 1/8th) of the
available RAM pages threads-max is reduced accordingly.</info></param><param locked="0" path="/proc/sys/kernel/version"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info># cat osrelease
2.1.88
# cat ostype
Linux
# cat version
#5 Wed Feb 25 21:49:24 MET 1998

The files osrelease and ostype should be clear enough. Version
needs a little more clarification however. The '#5' means that
this is the fifth kernel built from this source base and the
date behind it indicates the time the kernel was built.
The only way to tune these values is to rebuild the kernel :-)</info></param><param locked="0" path="/proc/sys/kernel/watchdog"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This parameter can be used to disable or enable the soft lockup detector
_and_ the NMI watchdog (i.e. the hard lockup detector) at the same time.

   0 - disable both lockup detectors
   1 - enable both lockup detectors

The soft lockup detector and the NMI watchdog can also be disabled or
enabled individually, using the soft_watchdog and nmi_watchdog parameters.
If the watchdog parameter is read, for example by executing

   cat /proc/sys/kernel/watchdog

the output of this command (0 or 1) shows the logical OR of soft_watchdog
and nmi_watchdog.</info></param><param locked="0" path="/proc/sys/kernel/watchdog_thresh"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This value can be used to control the frequency of hrtimer and NMI
events and the soft and hard lockup thresholds. The default threshold
is 10 seconds.

The softlockup threshold is (2 * watchdog_thresh). Setting this
tunable to zero will disable lockup detection altogether.</info></param><param locked="0" path="/proc/sys/vm/admin_reserve_kbytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The amount of free memory in the system that should be reserved for users
with the capability cap_sys_admin.

admin_reserve_kbytes defaults to min(3% of free pages, 8MB)

That should provide enough for the admin to log in and kill a process,
if necessary, under the default overcommit 'guess' mode.

Systems running under overcommit 'never' should increase this to account
for the full Virtual Memory Size of programs used to recover. Otherwise,
root may not be able to log in to recover the system.

How do you calculate a minimum useful reserve?

sshd or login + bash (or some other shell) + top (or ps, kill, etc.)

For overcommit 'guess', we can sum resident set sizes (RSS).
On x86_64 this is about 8MB.

For overcommit 'never', we can take the max of their virtual sizes (VSZ)
and add the sum of their RSS.
On x86_64 this is about 128MB.

Changing this takes effect whenever an application requests memory.</info></param><param locked="0" path="/proc/sys/vm/block_dump"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>block_dump enables block I/O debugging when set to a nonzero value.</info></param><param locked="0" path="/proc/sys/vm/dirty_background_bytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Contains the amount of dirty memory at which the background kernel
flusher threads will start writeback.

Note: dirty_background_bytes is the counterpart of dirty_background_ratio. Only
one of them may be specified at a time. When one sysctl is written it is
immediately taken into account to evaluate the dirty memory limits and the
other appears as 0 when read.</info></param><param locked="0" path="/proc/sys/vm/dirty_background_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Contains, as a percentage of total available memory that contains free pages
and reclaimable pages, the number of pages at which the background kernel
flusher threads will start writing out dirty data.

The total avaiable memory is not equal to total system memory.
</info></param><param locked="0" path="/proc/sys/vm/dirty_bytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Contains the amount of dirty memory at which a process generating disk writes
will itself start writeback.

Note: dirty_bytes is the counterpart of dirty_ratio. Only one of them may be
specified at a time. When one sysctl is written it is immediately taken into
account to evaluate the dirty memory limits and the other appears as 0 when
read.

Note: the minimum value allowed for dirty_bytes is two pages (in bytes); any
value lower than this limit will be ignored and the old configuration will be
retained.</info></param><param locked="0" path="/proc/sys/vm/dirty_expire_centisecs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This tunable is used to define when dirty data is old enough to be eligible
for writeout by the kernel flusher threads.  It is expressed in 100'ths
of a second.  Data which has been dirty in-memory for longer than this
interval will be written out next time a flusher thread wakes up.</info></param><param locked="0" path="/proc/sys/vm/dirty_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Contains, as a percentage of total available memory that contains free pages
and reclaimable pages, the number of pages at which a process which is
generating disk writes will itself start writing out dirty data.

The total avaiable memory is not equal to total system memory.</info></param><param locked="0" path="/proc/sys/vm/dirty_writeback_centisecs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The kernel flusher threads will periodically wake up and write `old' data
out to disk.  This tunable expresses the interval between those wakeups, in
100'ths of a second.

Setting this to zero disables periodic writeback altogether.</info></param><param locked="0" path="/proc/sys/vm/drop_caches"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Writing to this will cause the kernel to drop clean caches, as well as
reclaimable slab objects like dentries and inodes.  Once dropped, their
memory becomes free.

To free pagecache:
	echo 1 &gt; /proc/sys/vm/drop_caches
To free reclaimable slab objects (includes dentries and inodes):
	echo 2 &gt; /proc/sys/vm/drop_caches
To free slab objects and pagecache:
	echo 3 &gt; /proc/sys/vm/drop_caches

This is a non-destructive operation and will not free any dirty objects.
To increase the number of objects freed by this operation, the user may run
`sync' prior to writing to /proc/sys/vm/drop_caches.  This will minimize the
number of dirty objects on the system and create more candidates to be
dropped.

This file is not a means to control the growth of the various kernel caches
(inodes, dentries, pagecache, etc...)  These objects are automatically
reclaimed by the kernel when memory is needed elsewhere on the system.

Use of this file can cause performance problems.  Since it discards cached
objects, it may cost a significant amount of I/O and CPU to recreate the
dropped objects, especially if they were under heavy use.  Because of this,
use outside of a testing or debugging environment is not recommended.

You may see informational messages in your kernel log when this file is
used:

	cat (1234): drop_caches: 3

These are informational only.  They do not mean that anything is wrong
with your system.  To disable them, echo 4 (bit 3) into drop_caches.
</info></param><param locked="0" path="/proc/sys/vm/hugepages_treat_as_movable"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This parameter controls whether we can allocate hugepages from ZONE_MOVABLE
or not. If set to non-zero, hugepages can be allocated from ZONE_MOVABLE.
ZONE_MOVABLE is created when kernel boot parameter kernelcore= is specified,
so this parameter has no effect if used without kernelcore=.

Hugepage migration is now available in some situations which depend on the
architecture and/or the hugepage size. If a hugepage supports migration,
allocation from ZONE_MOVABLE is always enabled for the hugepage regardless
of the value of this parameter.
IOW, this parameter affects only non-migratable hugepages.

Assuming that hugepages are not migratable in your system, one usecase of
this parameter is that users can make hugepage pool more extensible by
enabling the allocation from ZONE_MOVABLE. This is because on ZONE_MOVABLE
page reclaim/migration/compaction work more and you can get contiguous
memory more likely. Note that using ZONE_MOVABLE for non-migratable
hugepages can do harm to other features like memory hotremove (because
memory hotremove expects that memory blocks on ZONE_MOVABLE are always
removable,) so it's a trade-off responsible for the users.</info></param><param locked="0" path="/proc/sys/vm/hugetlb_shm_group"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>hugetlb_shm_group contains group id that is allowed to create SysV
shared memory segment using hugetlb page.</info></param><param locked="0" path="/proc/sys/vm/laptop_mode"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>laptop_mode is a knob that controls &quot;laptop mode&quot;. All the things that are
controlled by this knob are discussed in Documentation/laptops/laptop-mode.txt.</info></param><param locked="0" path="/proc/sys/vm/legacy_va_layout"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>If non-zero, this sysctl disables the new 32-bit mmap layout - the kernel
will use the legacy (2.4) layout for all processes.</info></param><param locked="0" path="/proc/sys/vm/lowmem_reserve_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>For some specialised workloads on highmem machines it is dangerous for
the kernel to allow process memory to be allocated from the &quot;lowmem&quot;
zone.  This is because that memory could then be pinned via the mlock()
system call, or by unavailability of swapspace.

And on large highmem machines this lack of reclaimable lowmem memory
can be fatal.

So the Linux page allocator has a mechanism which prevents allocations
which _could_ use highmem from using too much lowmem.  This means that
a certain amount of lowmem is defended from the possibility of being
captured into pinned user memory.

(The same argument applies to the old 16 megabyte ISA DMA region.  This
mechanism will also defend that region from allocations which could use
highmem or lowmem).

The `lowmem_reserve_ratio' tunable determines how aggressive the kernel is
in defending these lower zones.

If you have a machine which uses highmem or ISA DMA and your
applications are using mlock(), or if you are running with no swap then
you probably should change the lowmem_reserve_ratio setting.

The lowmem_reserve_ratio is an array. You can see them by reading this file.
-
% cat /proc/sys/vm/lowmem_reserve_ratio
256     256     32
-
Note: # of this elements is one fewer than number of zones. Because the highest
      zone's value is not necessary for following calculation.

But, these values are not used directly. The kernel calculates # of protection
pages for each zones from them. These are shown as array of protection pages
in /proc/zoneinfo like followings. (This is an example of x86-64 box).
Each zone has an array of protection pages like this.

-
Node 0, zone      DMA
  pages free     1355
        min      3
        low      3
        high     4
	:
	:
    numa_other   0
        protection: (0, 2004, 2004, 2004)
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  pagesets
    cpu: 0 pcp: 0
        :
-
These protections are added to score to judge whether this zone should be used
for page allocation or should be reclaimed.

In this example, if normal pages (index=2) are required to this DMA zone and
watermark[WMARK_HIGH] is used for watermark, the kernel judges this zone should
not be used because pages_free(1355) is smaller than watermark + protection[2]
(4 + 2004 = 2008). If this protection value is 0, this zone would be used for
normal page requirement. If requirement is DMA zone(index=0), protection[0]
(=0) is used.

zone[i]'s protection[j] is calculated by following expression.

(i &lt; j):
  zone[i]-&gt;protection[j]
  = (total sums of managed_pages from zone[i+1] to zone[j] on the node)
    / lowmem_reserve_ratio[i];
(i = j):
   (should not be protected. = 0;
(i &gt; j):
   (not necessary, but looks 0)

The default values of lowmem_reserve_ratio[i] are
    256 (if zone[i] means DMA or DMA32 zone)
    32  (others).
As above expression, they are reciprocal number of ratio.
256 means 1/256. # of protection pages becomes about &quot;0.39%&quot; of total managed
pages of higher zones on the node.

If you would like to protect more pages, smaller values are effective.
The minimum value is 1 (1/1 -&gt; 100%).
</info></param><param locked="0" path="/proc/sys/vm/max_map_count"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This file contains the maximum number of memory map areas a process
may have. Memory map areas are used as a side-effect of calling
malloc, directly by mmap and mprotect, and also when loading shared
libraries.

While most applications need less than a thousand maps, certain
programs, particularly malloc debuggers, may consume lots of them,
e.g., up to one or two maps per allocation.

The default value is 65536.</info></param><param locked="0" path="/proc/sys/vm/memory_failure_early_kill"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Control how to kill processes when uncorrected memory error (typically
a 2bit error in a memory module) is detected in the background by hardware
that cannot be handled by the kernel. In some cases (like the page
still having a valid copy on disk) the kernel will handle the failure
transparently without affecting any applications. But if there is
no other uptodate copy of the data it will kill to prevent any data
corruptions from propagating.

1: Kill all processes that have the corrupted and not reloadable page mapped
as soon as the corruption is detected.  Note this is not supported
for a few types of pages, like kernel internally allocated data or
the swap cache, but works for the majority of user pages.

0: Only unmap the corrupted page from all processes and only kill a process
who tries to access it.

The kill is done using a catchable SIGBUS with BUS_MCEERR_AO, so processes can
handle this if they want to.

This is only active on architectures/platforms with advanced machine
check handling and depends on the hardware capabilities.

Applications can override this setting individually with the PR_MCE_KILL prctl</info></param><param locked="0" path="/proc/sys/vm/memory_failure_recovery"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Enable memory failure recovery (when supported by the platform)

1: Attempt recovery.

0: Always panic on a memory failure.</info></param><param locked="0" path="/proc/sys/vm/min_free_kbytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This is used to force the Linux VM to keep a minimum number
of kilobytes free.  The VM uses this number to compute a
watermark[WMARK_MIN] value for each lowmem zone in the system.
Each lowmem zone gets a number of reserved free pages based
proportionally on its size.

Some minimal amount of memory is needed to satisfy PF_MEMALLOC
allocations; if you set this to lower than 1024KB, your system will
become subtly broken, and prone to deadlock under high loads.

Setting this too high will OOM your machine instantly.</info></param><param locked="0" path="/proc/sys/vm/min_slab_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This is available only on NUMA kernels.

A percentage of the total pages in each zone.  On Zone reclaim
(fallback from the local zone occurs) slabs will be reclaimed if more
than this percentage of pages in a zone are reclaimable slab pages.
This insures that the slab growth stays under control even in NUMA
systems that rarely perform global reclaim.

The default is 5 percent.

Note that slab reclaim is triggered in a per zone / node fashion.
The process of reclaiming slab memory is currently not node specific
and may not be fast.</info></param><param locked="0" path="/proc/sys/vm/min_unmapped_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This is available only on NUMA kernels.

This is a percentage of the total pages in each zone. Zone reclaim will
only occur if more than this percentage of pages are in a state that
zone_reclaim_mode allows to be reclaimed.

If zone_reclaim_mode has the value 4 OR'd, then the percentage is compared
against all file-backed unmapped pages including swapcache pages and tmpfs
files. Otherwise, only unmapped pages backed by normal files but not tmpfs
files and similar are considered.

The default is 1 percent.</info></param><param locked="0" path="/proc/sys/vm/mmap_min_addr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This file indicates the amount of address space  which a user process will
be restricted from mmapping.  Since kernel null dereference bugs could
accidentally operate based on the information in the first couple of pages
of memory userspace processes should not be allowed to write to them.  By
default this value is set to 0 and no protections will be enforced by the
security module.  Setting this value to something like 64k will allow the
vast majority of applications to work correctly and provide defense in depth
against future potential kernel bugs.</info></param><param locked="0" path="/proc/sys/vm/nr_pdflush_threads"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/vm/numa_zonelist_order"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This sysctl is only for NUMA.
'where the memory is allocated from' is controlled by zonelists.
(This documentation ignores ZONE_HIGHMEM/ZONE_DMA32 for simple explanation.
 you may be able to read ZONE_DMA as ZONE_DMA32...)

In non-NUMA case, a zonelist for GFP_KERNEL is ordered as following.
ZONE_NORMAL -&gt; ZONE_DMA
This means that a memory allocation request for GFP_KERNEL will
get memory from ZONE_DMA only when ZONE_NORMAL is not available.

In NUMA case, you can think of following 2 types of order.
Assume 2 node NUMA and below is zonelist of Node(0)'s GFP_KERNEL

(A) Node(0) ZONE_NORMAL -&gt; Node(0) ZONE_DMA -&gt; Node(1) ZONE_NORMAL
(B) Node(0) ZONE_NORMAL -&gt; Node(1) ZONE_NORMAL -&gt; Node(0) ZONE_DMA.

Type(A) offers the best locality for processes on Node(0), but ZONE_DMA
will be used before ZONE_NORMAL exhaustion. This increases possibility of
out-of-memory(OOM) of ZONE_DMA because ZONE_DMA is tend to be small.

Type(B) cannot offer the best locality but is more robust against OOM of
the DMA zone.

Type(A) is called as &quot;Node&quot; order. Type (B) is &quot;Zone&quot; order.

&quot;Node order&quot; orders the zonelists by node, then by zone within each node.
Specify &quot;[Nn]ode&quot; for node order

&quot;Zone Order&quot; orders the zonelists by zone type, then by node within each
zone.  Specify &quot;[Zz]one&quot; for zone order.

Specify &quot;[Dd]efault&quot; to request automatic configuration.  Autoconfiguration
will select &quot;node&quot; order in following case.
(1) if the DMA zone does not exist or
(2) if the DMA zone comprises greater than 50% of the available memory or
(3) if any node's DMA zone comprises greater than 70% of its local memory and
    the amount of local memory is big enough.

Otherwise, &quot;zone&quot; order will be selected. Default order is recommended unless
this is causing problems for your system/application.</info></param><param locked="0" path="/proc/sys/vm/oom_dump_tasks"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Enables a system-wide task dump (excluding kernel threads) to be produced
when the kernel performs an OOM-killing and includes such information as
pid, uid, tgid, vm size, rss, nr_ptes, nr_pmds, swapents, oom_score_adj
score, and name.  This is helpful to determine why the OOM killer was
invoked, to identify the rogue task that caused it, and to determine why
the OOM killer chose the task it did to kill.

If this is set to zero, this information is suppressed.  On very
large systems with thousands of tasks it may not be feasible to dump
the memory state information for each one.  Such systems should not
be forced to incur a performance penalty in OOM conditions when the
information may not be desired.

If this is set to non-zero, this information is shown whenever the
OOM killer actually kills a memory-hogging task.

The default value is 1 (enabled).</info></param><param locked="0" path="/proc/sys/vm/oom_kill_allocating_task"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This enables or disables killing the OOM-triggering task in
out-of-memory situations.

If this is set to zero, the OOM killer will scan through the entire
tasklist and select a task based on heuristics to kill.  This normally
selects a rogue memory-hogging task that frees up a large amount of
memory when killed.

If this is set to non-zero, the OOM killer simply kills the task that
triggered the out-of-memory condition.  This avoids the expensive
tasklist scan.

If panic_on_oom is selected, it takes precedence over whatever value
is used in oom_kill_allocating_task.

The default value is 0.</info></param><param locked="0" path="/proc/sys/vm/overcommit_kbytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>When overcommit_memory is set to 2, the committed address space is not
permitted to exceed swap plus this amount of physical RAM. See below.

Note: overcommit_kbytes is the counterpart of overcommit_ratio. Only one
of them may be specified at a time. Setting one disables the other (which
then appears as 0 when read).</info></param><param locked="0" path="/proc/sys/vm/overcommit_memory"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This value contains a flag that enables memory overcommitment.

When this flag is 0, the kernel attempts to estimate the amount
of free memory left when userspace requests more memory.

When this flag is 1, the kernel pretends there is always enough
memory until it actually runs out.

When this flag is 2, the kernel uses a &quot;never overcommit&quot;
policy that attempts to prevent any overcommit of memory.
Note that user_reserve_kbytes affects this policy.

This feature can be very useful because there are a lot of
programs that malloc() huge amounts of memory &quot;just-in-case&quot;
and don't use much of it.

The default value is 0.

See Documentation/vm/overcommit-accounting and
mm/mmap.c::__vm_enough_memory() for more information.</info></param><param locked="0" path="/proc/sys/vm/overcommit_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>When overcommit_memory is set to 2, the committed address
space is not permitted to exceed swap plus this percentage
of physical RAM.  See above.
</info></param><param locked="0" path="/proc/sys/vm/page-cluster"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>page-cluster controls the number of pages up to which consecutive pages
are read in from swap in a single attempt. This is the swap counterpart
to page cache readahead.
The mentioned consecutivity is not in terms of virtual/physical addresses,
but consecutive on swap space - that means they were swapped out together.

It is a logarithmic value - setting it to zero means &quot;1 page&quot;, setting
it to 1 means &quot;2 pages&quot;, setting it to 2 means &quot;4 pages&quot;, etc.
Zero disables swap readahead completely.

The default value is three (eight pages at a time).  There may be some
small benefits in tuning this to a different value if your workload is
swap-intensive.

Lower values mean lower latencies for initial faults, but at the same time
extra faults and I/O delays for following faults if they would have been part of
that consecutive pages readahead would have brought in.</info></param><param locked="0" path="/proc/sys/vm/panic_on_oom"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This enables or disables panic on out-of-memory feature.

If this is set to 0, the kernel will kill some rogue process,
called oom_killer.  Usually, oom_killer can kill rogue processes and
system will survive.

If this is set to 1, the kernel panics when out-of-memory happens.
However, if a process limits using nodes by mempolicy/cpusets,
and those nodes become memory exhaustion status, one process
may be killed by oom-killer. No panic occurs in this case.
Because other nodes' memory may be free. This means system total status
may be not fatal yet.

If this is set to 2, the kernel panics compulsorily even on the
above-mentioned. Even oom happens under memory cgroup, the whole
system panics.

The default value is 0.
1 and 2 are for failover of clustering. Please select either
according to your policy of failover.
panic_on_oom=2+kdump gives you very strong tool to investigate
why oom happens. You can get snapshot.</info></param><param locked="0" path="/proc/sys/vm/percpu_pagelist_fraction"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This is the fraction of pages at most (high mark pcp-&gt;high) in each zone that
are allocated for each per cpu page list.  The min value for this is 8.  It
means that we don't allow more than 1/8th of pages in each zone to be
allocated in any single per_cpu_pagelist.  This entry only changes the value
of hot per cpu pagelists.  User can specify a number like 100 to allocate
1/100th of each zone to each per cpu page list.

The batch value of each per cpu pagelist is also updated as a result.  It is
set to pcp-&gt;high/4.  The upper limit of batch is (PAGE_SHIFT * 8)

The initial value is zero.  Kernel does not use this value at boot time to set
the high water marks for each per cpu page list.  If the user writes '0' to this
sysctl, it will revert to this default behavior.</info></param><param locked="0" path="/proc/sys/vm/stat_interval"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The time interval between which vm statistics are updated.  The default
is 1 second.</info></param><param locked="0" path="/proc/sys/vm/swappiness"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This control is used to define how aggressive the kernel will swap
memory pages.  Higher values will increase agressiveness, lower values
decrease the amount of swap.  A value of 0 instructs the kernel not to
initiate swap until the amount of free and file-backed pages is less
than the high water mark in a zone.

The default value is 60.</info></param><param locked="0" path="/proc/sys/vm/vfs_cache_pressure"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This percentage value controls the tendency of the kernel to reclaim
the memory which is used for caching of directory and inode objects.

At the default value of vfs_cache_pressure=100 the kernel will attempt to
reclaim dentries and inodes at a &quot;fair&quot; rate with respect to pagecache and
swapcache reclaim.  Decreasing vfs_cache_pressure causes the kernel to prefer
to retain dentry and inode caches. When vfs_cache_pressure=0, the kernel will
never reclaim dentries and inodes due to memory pressure and this can easily
lead to out-of-memory conditions. Increasing vfs_cache_pressure beyond 100
causes the kernel to prefer to reclaim dentries and inodes.

Increasing vfs_cache_pressure significantly beyond 100 may have negative
performance impact. Reclaim code needs to take various locks to find freeable
directory and inode objects. With vfs_cache_pressure=1000, it will look for
ten times more freeable objects than there are.</info></param><param locked="0" path="/proc/sys/vm/zone_reclaim_mode"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Zone_reclaim_mode allows someone to set more or less aggressive approaches to
reclaim memory when a zone runs out of memory. If it is set to zero then no
zone reclaim occurs. Allocations will be satisfied from other zones / nodes
in the system.

This is value ORed together of

1	= Zone reclaim on
2	= Zone reclaim writes dirty pages out
4	= Zone reclaim swaps pages

zone_reclaim_mode is disabled by default.  For file servers or workloads
that benefit from having their data cached, zone_reclaim_mode should be
left disabled as the caching effect is likely to be more important than
data locality.

zone_reclaim may be enabled if it's known that the workload is partitioned
such that each partition fits within a NUMA node and that accessing remote
memory would cause a measurable performance reduction.  The page allocator
will then reclaim easily reusable pages (those page cache pages that are
currently not used) before allocating off node pages.

Allowing zone reclaim to write out pages stops processes that are
writing large amounts of data from dirtying pages on other nodes. Zone
reclaim will write out dirty pages if a zone fills up and so effectively
throttle the process. This may decrease the performance of a single process
since it cannot use all of system memory to buffer the outgoing writes
anymore but it preserve the memory on other nodes so that the performance
of other processes running on other nodes will not be affected.

Allowing regular swap effectively restricts allocations to the local
node unless explicitly overridden by memory policies or cpuset
configurations.</info></param><param locked="0" path="/proc/sys/fs/aio-max-nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>aio-nr is the running total of the number of events specified on the
io_setup system call for all currently active aio contexts.  If aio-nr
reaches aio-max-nr then io_setup will fail with EAGAIN.  Note that
raising aio-max-nr does not result in the pre-allocation or re-sizing
of any kernel data structures.</info></param><param locked="0" path="/proc/sys/fs/aio-nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>aio-nr is the running total of the number of events specified on the
io_setup system call for all currently active aio contexts.  If aio-nr
reaches aio-max-nr then io_setup will fail with EAGAIN.  Note that
raising aio-max-nr does not result in the pre-allocation or re-sizing
of any kernel data structures.</info></param><param locked="0" path="/proc/sys/fs/dentry-state"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>From linux/fs/dentry.c:
--------------------------------------------------------------
struct {
        int nr_dentry;
        int nr_unused;
        int age_limit;         /* age in seconds */
        int want_pages;        /* pages requested by system */
        int dummy[2];
} dentry_stat = {0, 0, 45, 0,};
-------------------------------------------------------------- 

Dentries are dynamically allocated and deallocated, and
nr_dentry seems to be 0 all the time. Hence it's safe to
assume that only nr_unused, age_limit and want_pages are
used. Nr_unused seems to be exactly what its name says.
Age_limit is the age in seconds after which dcache entries
can be reclaimed when memory is short and want_pages is
nonzero when shrink_dcache_pages() has been called and the
dcache isn't pruned yet.</info></param><param locked="0" path="/proc/sys/fs/dir-notify-enable"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/fs/file-max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The value in file-max denotes the maximum number of file-
handles that the Linux kernel will allocate. When you get lots
of error messages about running out of file handles, you might
want to increase this limit.

Historically,the kernel was able to allocate file handles
dynamically, but not to free them again. The three values in
file-nr denote the number of allocated file handles, the number
of allocated but unused file handles, and the maximum number of
file handles. Linux 2.6 always reports 0 as the number of free
file handles -- this is not an error, it just means that the
number of allocated file handles exactly matches the number of
used file handles.

Attempts to allocate more file descriptors than file-max are
reported with printk, look for &quot;VFS: file-max limit &lt;number&gt;
reached&quot;.</info></param><param locked="0" path="/proc/sys/fs/file-nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The value in file-max denotes the maximum number of file-
handles that the Linux kernel will allocate. When you get lots
of error messages about running out of file handles, you might
want to increase this limit.

Historically,the kernel was able to allocate file handles
dynamically, but not to free them again. The three values in
file-nr denote the number of allocated file handles, the number
of allocated but unused file handles, and the maximum number of
file handles. Linux 2.6 always reports 0 as the number of free
file handles -- this is not an error, it just means that the
number of allocated file handles exactly matches the number of
used file handles.

Attempts to allocate more file descriptors than file-max are
reported with printk, look for &quot;VFS: file-max limit &lt;number&gt;
reached&quot;.</info></param><param locked="0" path="/proc/sys/fs/inode-nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>As with file handles, the kernel allocates the inode structures
dynamically, but can't free them yet.

The value in inode-max denotes the maximum number of inode
handlers. This value should be 3-4 times larger than the value
in file-max, since stdin, stdout and network sockets also
need an inode struct to handle them. When you regularly run
out of inodes, you need to increase this value.

The file inode-nr contains the first two items from
inode-state, so we'll skip to that file...

Inode-state contains three actual numbers and four dummies.
The actual numbers are, in order of appearance, nr_inodes,
nr_free_inodes and preshrink.

Nr_inodes stands for the number of inodes the system has
allocated, this can be slightly more than inode-max because
Linux allocates them one pageful at a time.

Nr_free_inodes represents the number of free inodes (?) and
preshrink is nonzero when the nr_inodes &gt; inode-max and the
system needs to prune the inode list instead of allocating
more.</info></param><param locked="0" path="/proc/sys/fs/lease-break-time"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/fs/leases-enable"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/fs/nr_open"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This denotes the maximum number of file-handles a process can
allocate. Default value is 1024*1024 (1048576) which should be
enough for most machines. Actual limit depends on RLIMIT_NOFILE
resource limit.</info></param><param locked="0" path="/proc/sys/fs/overflowgid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Some filesystems only support 16-bit UIDs and GIDs, although in Linux
UIDs and GIDs are 32 bits. When one of these filesystems is mounted
with writes enabled, any UID or GID that would exceed 65535 is translated
to a fixed value before being written to disk.

These sysctls allow you to change the value of the fixed UID and GID.
The default is 65534.</info></param><param locked="0" path="/proc/sys/fs/overflowuid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Some filesystems only support 16-bit UIDs and GIDs, although in Linux
UIDs and GIDs are 32 bits. When one of these filesystems is mounted
with writes enabled, any UID or GID that would exceed 65535 is translated
to a fixed value before being written to disk.

These sysctls allow you to change the value of the fixed UID and GID.
The default is 65534.</info></param><param locked="0" path="/proc/sys/fs/pipe-max-size"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/fs/protected_hardlinks"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>A long-standing class of security issues is the hardlink-based
time-of-check-time-of-use race, most commonly seen in world-writable
directories like /tmp. The common method of exploitation of this flaw
is to cross privilege boundaries when following a given hardlink (i.e. a
root process follows a hardlink created by another user). Additionally,
on systems without separated partitions, this stops unauthorized users
from &quot;pinning&quot; vulnerable setuid/setgid files against being upgraded by
the administrator, or linking to special files.

When set to &quot;0&quot;, hardlink creation behavior is unrestricted.

When set to &quot;1&quot; hardlinks cannot be created by users if they do not
already own the source file, or do not have read/write access to it.

This protection is based on the restrictions in Openwall and grsecurity.</info></param><param locked="0" path="/proc/sys/fs/protected_symlinks"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>A long-standing class of security issues is the symlink-based
time-of-check-time-of-use race, most commonly seen in world-writable
directories like /tmp. The common method of exploitation of this flaw
is to cross privilege boundaries when following a given symlink (i.e. a
root process follows a symlink belonging to another user). For a likely
incomplete list of hundreds of examples across the years, please see:
http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=/tmp

When set to &quot;0&quot;, symlink following behavior is unrestricted.

When set to &quot;1&quot; symlinks are permitted to be followed only when outside
a sticky world-writable directory, or when the uid of the symlink and
follower match, or when the directory owner matches the symlink's owner.

This protection is based on the restrictions in Openwall and grsecurity.</info></param><param locked="0" path="/proc/sys/crypto/fips_enabled"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/kernel/pty/max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>the number of assignable pty</info></param><param locked="0" path="/proc/sys/kernel/pty/nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>pty is allocated in current</info></param><param locked="0" path="/proc/sys/kernel/random/boot_id"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/kernel/random/entropy_avail"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/kernel/random/poolsize"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/kernel/random/read_wakeup_threshold"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/kernel/random/uuid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/kernel/random/write_wakeup_threshold"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/fs/binfmt_misc/status"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/fs/epoll/max_user_watches"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Every epoll file descriptor can store a number of files to be monitored
for event readiness. Each one of these monitored files constitutes a &quot;watch&quot;.
This configuration option sets the maximum number of &quot;watches&quot; that are
allowed for each user.
Each &quot;watch&quot; costs roughly 90 bytes on a 32bit kernel, and roughly 160 bytes
on a 64bit one.
The current default value for  max_user_watches  is the 1/32 of the available
low memory, divided for the &quot;watch&quot; cost in bytes.</info></param><param locked="0" path="/proc/sys/fs/inotify/max_queued_events"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/fs/inotify/max_user_instances"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/fs/inotify/max_user_watches"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/fs/mqueue/msg_default"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>/proc/sys/fs/mqueue/msg_default is  a read/write  file for setting/getting the
default number of messages in a queue value if attr parameter of mq_open(2) is
NULL. If it exceed msg_max, the default value is initialized msg_max.</info></param><param locked="0" path="/proc/sys/fs/mqueue/msg_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>/proc/sys/fs/mqueue/msg_max  is  a  read/write file  for  setting/getting  the
maximum number of messages in a queue value.  In fact it is the limiting value
for another (user) limit which is set in mq_open invocation. This attribute of
a queue must be less or equal then msg_max.</info></param><param locked="0" path="/proc/sys/fs/mqueue/msgsize_default"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>/proc/sys/fs/mqueue/msgsize_default is a read/write file for setting/getting
the default message size value if attr parameter of mq_open(2) is NULL. If it
exceed msgsize_max, the default value is initialized msgsize_max.</info></param><param locked="0" path="/proc/sys/fs/mqueue/queues_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>/proc/sys/fs/mqueue/queues_max is a read/write  file for  setting/getting  the
maximum number of message queues allowed on the system.</info></param><param locked="0" path="/proc/sys/fs/mqueue/msgsize_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>/proc/sys/fs/mqueue/msgsize_max is  a read/write  file for setting/getting the
maximum  message size value (it is every  message queue's attribute set during
its creation).</info></param><param path="/proc/sys/kernel/kptr_restrict"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This toggle indicates whether restrictions are placed on
exposing kernel addresses via /proc and other interfaces.

When kptr_restrict is set to (0), the default, there are no restrictions.

When kptr_restrict is set to (1), kernel pointers printed using the %pK
format specifier will be replaced with 0's unless the user has CAP_SYSLOG
and effective user and group ids are equal to the real ids. This is
because %pK checks are done at read() time rather than open() time, so
if permissions are elevated between the open() and the read() (e.g via
a setuid binary) then %pK will not leak kernel pointers to unprivileged
users. Note, this is a temporary solution only. The correct long-term
solution is to do the permission checks at open() time. Consider removing
world read permissions from files that use %pK, and using dmesg_restrict
to protect against uses of %pK in dmesg(8) if leaking kernel pointer
values to unprivileged users is a concern.

When kptr_restrict is set to (2), kernel pointers printed using
%pK will be replaced with 0's regardless of privileges.</info></param><param path="/proc/sys/kernel/numa_balancing"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Enables/disables automatic page fault based NUMA memory
balancing. Memory is moved automatically to nodes
that access it often.

Enables/disables automatic NUMA memory balancing. On NUMA machines, there
is a performance penalty if remote memory is accessed by a CPU. When this
feature is enabled the kernel samples what task thread is accessing memory
by periodically unmapping pages and later trapping a page fault. At the
time of the page fault, it is determined if the data being accessed should
be migrated to a local memory node.

The unmapping of pages and trapping faults incur additional overhead that
ideally is offset by improved memory locality but there is no universal
guarantee. If the target workload is already bound to NUMA nodes then this
feature should be disabled. Otherwise, if the system overhead from the
feature is too high then the rate the kernel samples for NUMA hinting
faults may be controlled by the numa_balancing_scan_period_min_ms,
numa_balancing_scan_delay_ms, numa_balancing_scan_period_max_ms,
numa_balancing_scan_size_mb, and numa_balancing_settle_count sysctls.</info></param><param path="/proc/sys/kernel/numa_balancing_scan_delay_ms"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>numa_balancing_scan_period_min_ms, numa_balancing_scan_delay_ms,
numa_balancing_scan_period_max_ms, numa_balancing_scan_size_mb

Automatic NUMA balancing scans tasks address space and unmaps pages to
detect if pages are properly placed or if the data should be migrated to a
memory node local to where the task is running.  Every &quot;scan delay&quot; the task
scans the next &quot;scan size&quot; number of pages in its address space. When the
end of the address space is reached the scanner restarts from the beginning.

In combination, the &quot;scan delay&quot; and &quot;scan size&quot; determine the scan rate.
When &quot;scan delay&quot; decreases, the scan rate increases.  The scan delay and
hence the scan rate of every task is adaptive and depends on historical
behaviour. If pages are properly placed then the scan delay increases,
otherwise the scan delay decreases.  The &quot;scan size&quot; is not adaptive but
the higher the &quot;scan size&quot;, the higher the scan rate.

Higher scan rates incur higher system overhead as page faults must be
trapped and potentially data must be migrated. However, the higher the scan
rate, the more quickly a tasks memory is migrated to a local node if the
workload pattern changes and minimises performance impact due to remote
memory accesses. These sysctls control the thresholds for scan delays and
the number of pages scanned.

numa_balancing_scan_period_min_ms is the minimum time in milliseconds to
scan a tasks virtual memory. It effectively controls the maximum scanning
rate for each task.

numa_balancing_scan_delay_ms is the starting &quot;scan delay&quot; used for a task
when it initially forks.

numa_balancing_scan_period_max_ms is the maximum time in milliseconds to
scan a tasks virtual memory. It effectively controls the minimum scanning
rate for each task.

numa_balancing_scan_size_mb is how many megabytes worth of pages are
scanned for a given scan.</info></param><param path="/proc/sys/kernel/numa_balancing_scan_period_max_ms"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>numa_balancing_scan_period_min_ms, numa_balancing_scan_delay_ms,
numa_balancing_scan_period_max_ms, numa_balancing_scan_size_mb

Automatic NUMA balancing scans tasks address space and unmaps pages to
detect if pages are properly placed or if the data should be migrated to a
memory node local to where the task is running.  Every &quot;scan delay&quot; the task
scans the next &quot;scan size&quot; number of pages in its address space. When the
end of the address space is reached the scanner restarts from the beginning.

In combination, the &quot;scan delay&quot; and &quot;scan size&quot; determine the scan rate.
When &quot;scan delay&quot; decreases, the scan rate increases.  The scan delay and
hence the scan rate of every task is adaptive and depends on historical
behaviour. If pages are properly placed then the scan delay increases,
otherwise the scan delay decreases.  The &quot;scan size&quot; is not adaptive but
the higher the &quot;scan size&quot;, the higher the scan rate.

Higher scan rates incur higher system overhead as page faults must be
trapped and potentially data must be migrated. However, the higher the scan
rate, the more quickly a tasks memory is migrated to a local node if the
workload pattern changes and minimises performance impact due to remote
memory accesses. These sysctls control the thresholds for scan delays and
the number of pages scanned.

numa_balancing_scan_period_min_ms is the minimum time in milliseconds to
scan a tasks virtual memory. It effectively controls the maximum scanning
rate for each task.

numa_balancing_scan_delay_ms is the starting &quot;scan delay&quot; used for a task
when it initially forks.

numa_balancing_scan_period_max_ms is the maximum time in milliseconds to
scan a tasks virtual memory. It effectively controls the minimum scanning
rate for each task.

numa_balancing_scan_size_mb is how many megabytes worth of pages are
scanned for a given scan.</info></param><param path="/proc/sys/kernel/numa_balancing_scan_period_min_ms"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>numa_balancing_scan_period_min_ms, numa_balancing_scan_delay_ms,
numa_balancing_scan_period_max_ms, numa_balancing_scan_size_mb

Automatic NUMA balancing scans tasks address space and unmaps pages to
detect if pages are properly placed or if the data should be migrated to a
memory node local to where the task is running.  Every &quot;scan delay&quot; the task
scans the next &quot;scan size&quot; number of pages in its address space. When the
end of the address space is reached the scanner restarts from the beginning.

In combination, the &quot;scan delay&quot; and &quot;scan size&quot; determine the scan rate.
When &quot;scan delay&quot; decreases, the scan rate increases.  The scan delay and
hence the scan rate of every task is adaptive and depends on historical
behaviour. If pages are properly placed then the scan delay increases,
otherwise the scan delay decreases.  The &quot;scan size&quot; is not adaptive but
the higher the &quot;scan size&quot;, the higher the scan rate.

Higher scan rates incur higher system overhead as page faults must be
trapped and potentially data must be migrated. However, the higher the scan
rate, the more quickly a tasks memory is migrated to a local node if the
workload pattern changes and minimises performance impact due to remote
memory accesses. These sysctls control the thresholds for scan delays and
the number of pages scanned.

numa_balancing_scan_period_min_ms is the minimum time in milliseconds to
scan a tasks virtual memory. It effectively controls the maximum scanning
rate for each task.

numa_balancing_scan_delay_ms is the starting &quot;scan delay&quot; used for a task
when it initially forks.

numa_balancing_scan_period_max_ms is the maximum time in milliseconds to
scan a tasks virtual memory. It effectively controls the minimum scanning
rate for each task.

numa_balancing_scan_size_mb is how many megabytes worth of pages are
scanned for a given scan.</info></param><param path="/proc/sys/kernel/numa_balancing_scan_size_mb"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>numa_balancing_scan_period_min_ms, numa_balancing_scan_delay_ms,
numa_balancing_scan_period_max_ms, numa_balancing_scan_size_mb

Automatic NUMA balancing scans tasks address space and unmaps pages to
detect if pages are properly placed or if the data should be migrated to a
memory node local to where the task is running.  Every &quot;scan delay&quot; the task
scans the next &quot;scan size&quot; number of pages in its address space. When the
end of the address space is reached the scanner restarts from the beginning.

In combination, the &quot;scan delay&quot; and &quot;scan size&quot; determine the scan rate.
When &quot;scan delay&quot; decreases, the scan rate increases.  The scan delay and
hence the scan rate of every task is adaptive and depends on historical
behaviour. If pages are properly placed then the scan delay increases,
otherwise the scan delay decreases.  The &quot;scan size&quot; is not adaptive but
the higher the &quot;scan size&quot;, the higher the scan rate.

Higher scan rates incur higher system overhead as page faults must be
trapped and potentially data must be migrated. However, the higher the scan
rate, the more quickly a tasks memory is migrated to a local node if the
workload pattern changes and minimises performance impact due to remote
memory accesses. These sysctls control the thresholds for scan delays and
the number of pages scanned.

numa_balancing_scan_period_min_ms is the minimum time in milliseconds to
scan a tasks virtual memory. It effectively controls the maximum scanning
rate for each task.

numa_balancing_scan_delay_ms is the starting &quot;scan delay&quot; used for a task
when it initially forks.

numa_balancing_scan_period_max_ms is the maximum time in milliseconds to
scan a tasks virtual memory. It effectively controls the minimum scanning
rate for each task.

numa_balancing_scan_size_mb is how many megabytes worth of pages are
scanned for a given scan.</info></param><param path="/proc/sys/vm/compact_memory"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Available only when CONFIG_COMPACTION is set. When 1 is written to the file,
all zones are compacted such that free memory is available in contiguous
blocks where possible. This can be important for example in the allocation of
huge pages although processes will also directly compact memory as required.</info></param><param path="/proc/sys/vm/extfrag_threshold"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This parameter affects whether the kernel will compact memory or direct
reclaim to satisfy a high-order allocation. The extfrag/extfrag_index file in
debugfs shows what the fragmentation index for each order is in each zone in
the system. Values tending towards 0 imply allocations would fail due to lack
of memory, values towards 1000 imply failures are due to fragmentation and -1
implies that the allocation will succeed as long as watermarks are met.

The kernel will not compact memory in a zone if the
fragmentation index is &lt;= extfrag_threshold. The default value is 500.</info></param><param path="/proc/sys/vm/nr_hugepages"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Change the minimum size of the hugepage pool.

See Documentation/vm/hugetlbpage.txt</info></param><param path="/proc/sys/vm/nr_overcommit_hugepages"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Change the maximum size of the hugepage pool. The maximum is
nr_hugepages + nr_overcommit_hugepages.

See Documentation/vm/hugetlbpage.txt</info></param><param path="/proc/sys/vm/user_reserve_kbytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>When overcommit_memory is set to 2, &quot;never overcommit&quot; mode, reserve
min(3% of current process size, user_reserve_kbytes) of free memory.
This is intended to prevent a user from starting a single memory hogging
process, such that they cannot recover (kill the hog).

user_reserve_kbytes defaults to min(3% of the current process size, 128MB).

If this is reduced to zero, then the user will be allowed to allocate
all free memory with a single process, minus admin_reserve_kbytes.
Any subsequent attempts to execute a command will result in
&quot;fork: Cannot allocate memory&quot;.

Changing this takes effect whenever an application requests memory.</info></param><param path="/proc/sys/fs/suid_dumpable"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This value can be used to query and set the core dump mode for setuid
or otherwise protected/tainted binaries. The modes are

0 - (default) - traditional behaviour. Any process which has changed
	privilege levels or is execute only will not be dumped.
1 - (debug) - all processes dump core when possible. The core dump is
	owned by the current user and no security is applied. This is
	intended for system debugging situations only. Ptrace is unchecked.
	This is insecure as it allows regular users to examine the memory
	contents of privileged processes.
2 - (suidsafe) - any binary which normally would not be dumped is dumped
	anyway, but only if the &quot;core_pattern&quot; kernel sysctl is set to
	either a pipe handler or a fully qualified path. (For more details
	on this limitation, see CVE-2006-2451.) This mode is appropriate
	when administrators are attempting to debug problems in a normal
	environment, and either have a core dump pipe handler that knows
	to treat privileged core dumps with care, or specific directory
	defined for catching core dumps. If a core dump happens without
	a pipe handler or fully qualifid path, a message will be emitted
	to syslog warning about the lack of a correct setting.
</info></param><param path="/proc/sys/kernel/numa_balancing_settle_count"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Enables/disables automatic page fault based NUMA memory
balancing. Memory is moved automatically to nodes
that access it often.

Enables/disables automatic NUMA memory balancing. On NUMA machines, there
is a performance penalty if remote memory is accessed by a CPU. When this
feature is enabled the kernel samples what task thread is accessing memory
by periodically unmapping pages and later trapping a page fault. At the
time of the page fault, it is determined if the data being accessed should
be migrated to a local memory node.

The unmapping of pages and trapping faults incur additional overhead that
ideally is offset by improved memory locality but there is no universal
guarantee. If the target workload is already bound to NUMA nodes then this
feature should be disabled. Otherwise, if the system overhead from the
feature is too high then the rate the kernel samples for NUMA hinting
faults may be controlled by the numa_balancing_scan_period_min_ms,
numa_balancing_scan_delay_ms, numa_balancing_scan_period_max_ms,
numa_balancing_scan_size_mb, and numa_balancing_settle_count sysctls.</info></param><param path="/proc/sys/kernel/sched_cfs_bandwidth_slice_us"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>For efficiency run-time is transferred between the global pool and CPU local
&quot;silos&quot; in a batch fashion.  This greatly reduces global accounting pressure
on large systems.  The amount transferred each time such an update is required
is described as the &quot;slice&quot;.

This is tunable via procfs:
	/proc/sys/kernel/sched_cfs_bandwidth_slice_us (default=5ms)

Larger slice values will reduce transfer overheads, while smaller values allow
for more fine-grained consumption.</info></param><param path="/proc/sys/kernel/sched_min_granularity_ns"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>CFS uses nanosecond granularity accounting and does not rely on any jiffies or
other HZ detail.  Thus the CFS scheduler has no notion of &quot;timeslices&quot; in the
way the previous scheduler had, and has no heuristics whatsoever.  There is
only one central tunable (you have to switch on CONFIG_SCHED_DEBUG):

   /proc/sys/kernel/sched_min_granularity_ns

which can be used to tune the scheduler from &quot;desktop&quot; (i.e., low latencies) to
&quot;server&quot; (i.e., good batching) workloads.  It defaults to a setting suitable
for desktop workloads.  SCHED_BATCH is handled by the CFS scheduler module too.

Due to its design, the CFS scheduler is not prone to any of the &quot;attacks&quot; that
exist today against the heuristics of the stock scheduler: fiftyp.c, thud.c,
chew.c, ring-test.c, massive_intr.c all work fine and do not impact
interactivity and produce the expected behavior.

The CFS scheduler has a much stronger handling of nice levels and SCHED_BATCH
than the previous vanilla scheduler: both types of workloads are isolated much
more aggressively.

SMP load-balancing has been reworked/sanitized: the runqueue-walking
assumptions are gone from the load-balancing code now, and iterators of the
scheduling modules are used.  The balancing code got quite a bit simpler as a
result.</info></param><param path="/proc/sys/kernel/sched_rt_period_us"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The system wide settings are configured under the /proc virtual file system:

/proc/sys/kernel/sched_rt_period_us:
  The scheduling period that is equivalent to 100% CPU bandwidth

/proc/sys/kernel/sched_rt_runtime_us:
  A global limit on how much time realtime scheduling may use.  Even without
  CONFIG_RT_GROUP_SCHED enabled, this will limit time reserved to realtime
  processes. With CONFIG_RT_GROUP_SCHED it signifies the total bandwidth
  available to all realtime groups.

  * Time is specified in us because the interface is s32. This gives an
    operating range from 1us to about 35 minutes.
  * sched_rt_period_us takes values from 1 to INT_MAX.
  * sched_rt_runtime_us takes values from -1 to (INT_MAX - 1).
  * A run time of -1 specifies runtime == period, ie. no limit.</info></param><param path="/proc/sys/kernel/sched_rt_runtime_us"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The system wide settings are configured under the /proc virtual file system:

/proc/sys/kernel/sched_rt_period_us:
  The scheduling period that is equivalent to 100% CPU bandwidth

/proc/sys/kernel/sched_rt_runtime_us:
  A global limit on how much time realtime scheduling may use.  Even without
  CONFIG_RT_GROUP_SCHED enabled, this will limit time reserved to realtime
  processes. With CONFIG_RT_GROUP_SCHED it signifies the total bandwidth
  available to all realtime groups.

  * Time is specified in us because the interface is s32. This gives an
    operating range from 1us to about 35 minutes.
  * sched_rt_period_us takes values from 1 to INT_MAX.
  * sched_rt_runtime_us takes values from -1 to (INT_MAX - 1).
  * A run time of -1 specifies runtime == period, ie. no limit.</info></param><param path="/proc/sys/kernel/keys/gc_delay"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Dead keys (for which the type has been removed) will be automatically unlinked
from those keyrings that point to them and deleted as soon as possible by a
background garbage collector.

Similarly, revoked and expired keys will be garbage collected, but only after a
certain amount of time has passed.  This time is set as a number of seconds in:

	/proc/sys/kernel/keys/gc_delay</info></param><param locked="0" path="/proc/sys/kernel/keys/maxbytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info> (*) /proc/sys/kernel/keys/maxkeys
     /proc/sys/kernel/keys/maxbytes

     These files hold the maximum number of keys that each non-root user may
     have and the maximum total number of bytes of data that each of those
     users may have stored in their keys.</info></param><param path="/proc/sys/kernel/keys/root_maxbytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info> (*) /proc/sys/kernel/keys/root_maxkeys
     /proc/sys/kernel/keys/root_maxbytes

     These files hold the maximum number of keys that root may have and the
     maximum total number of bytes of data that root may have stored in those
     keys.</info></param><param path="/proc/sys/kernel/keys/root_maxkeys"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info> (*) /proc/sys/kernel/keys/root_maxkeys
     /proc/sys/kernel/keys/root_maxbytes

     These files hold the maximum number of keys that root may have and the
     maximum total number of bytes of data that root may have stored in those
     keys.</info></param><param path="/proc/sys/kernel/keys/maxkeys"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info> (*) /proc/sys/kernel/keys/maxkeys
     /proc/sys/kernel/keys/maxbytes

     These files hold the maximum number of keys that each non-root user may
     have and the maximum total number of bytes of data that each of those
     users may have stored in their keys.</info></param><param path="/proc/sys/fs/xfs/age_buffer_centisecs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Dirty metadata is now tracked by the log subsystem and
flushing is driven by log space and idling demands. The
xfsbufd no longer exists, so this syctl does nothing.

Due for removal in 3.14.</info></param><param path="/proc/sys/fs/xfs/error_level"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>A volume knob for error reporting when internal errors occur.
This will generate detailed messages &amp; backtraces for filesystem
shutdowns, for example.  Current threshold values are:

XFS_ERRLEVEL_OFF:       0
XFS_ERRLEVEL_LOW:       1
XFS_ERRLEVEL_HIGH:      5</info></param><param path="/proc/sys/fs/xfs/filestream_centisecs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The interval at which the filesystem ages filestreams cache
references and returns timed-out AGs back to the free stream
pool.</info></param><param path="/proc/sys/fs/xfs/inherit_noatime"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.inherit_noatime	(Min: 0  Default: 1  Max: 1)
Setting this to &quot;1&quot; will cause the &quot;noatime&quot; flag set
by the xfs_io(8) chattr command on a directory to be
inherited by files in that directory.</info></param><param path="/proc/sys/fs/xfs/inherit_nodefrag"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.inherit_nodefrag	(Min: 0  Default: 1  Max: 1)
Setting this to &quot;1&quot; will cause the &quot;nodefrag&quot; flag set
by the xfs_io(8) chattr command on a directory to be
inherited by files in that directory.</info></param><param path="/proc/sys/fs/xfs/inherit_nodump"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.inherit_nodump		(Min: 0  Default: 1  Max: 1)
Setting this to &quot;1&quot; will cause the &quot;nodump&quot; flag set
by the xfs_io(8) chattr command on a directory to be
inherited by files in that directory.</info></param><param path="/proc/sys/fs/xfs/inherit_nosymlinks"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.inherit_nosymlinks	(Min: 0  Default: 1  Max: 1)
Setting this to &quot;1&quot; will cause the &quot;nosymlinks&quot; flag set
by the xfs_io(8) chattr command on a directory to be
inherited by files in that directory.</info></param><param path="/proc/sys/fs/xfs/inherit_sync"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.inherit_sync		(Min: 0  Default: 1  Max: 1)
Setting this to &quot;1&quot; will cause the &quot;sync&quot; flag set
by the xfs_io(8) chattr command on a directory to be
inherited by files in that directory.</info></param><param path="/proc/sys/fs/xfs/irix_sgid_inherit"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.irix_sgid_inherit	(Min: 0  Default: 0  Max: 1)
Controls files created in SGID directories.
If the group ID of the new file does not match the effective group
ID or one of the supplementary group IDs of the parent dir, the
ISGID bit is cleared if the irix_sgid_inherit compatibility sysctl
is set.</info></param><param path="/proc/sys/fs/xfs/irix_symlink_mode"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.irix_symlink_mode	(Min: 0  Default: 0  Max: 1)
Controls whether symlinks are created with mode 0777 (default)
or whether their mode is affected by the umask (irix mode).</info></param><param path="/proc/sys/fs/xfs/panic_mask"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.panic_mask		(Min: 0  Default: 0  Max: 127)
Causes certain error conditions to call BUG(). Value is a bitmask;
AND together the tags which represent errors which should cause panics:

		XFS_NO_PTAG                     0
		XFS_PTAG_IFLUSH                 0x00000001
		XFS_PTAG_LOGRES                 0x00000002
		XFS_PTAG_AILDELETE              0x00000004
		XFS_PTAG_ERROR_REPORT           0x00000008
		XFS_PTAG_SHUTDOWN_CORRUPT       0x00000010
		XFS_PTAG_SHUTDOWN_IOERROR       0x00000020
		XFS_PTAG_SHUTDOWN_LOGERROR      0x00000040

This option is intended for debugging only.</info></param><param path="/proc/sys/fs/xfs/rotorstep"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.rotorstep		(Min: 1  Default: 1  Max: 256)
In &quot;inode32&quot; allocation mode, this option determines how many
files the allocator attempts to allocate in the same allocation
group before moving to the next allocation group.  The intent
is to control the rate at which the allocator moves between
allocation groups when allocating extents for new files.</info></param><param path="/proc/sys/fs/xfs/speculative_prealloc_lifetime"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.speculative_prealloc_lifetime
(Units: seconds   Min: 1  Default: 300  Max: 86400)
The interval at which the background scanning for inodes
with unused speculative preallocation runs. The scan
removes unused preallocation from clean inodes and releases
the unused space back to the free pool.</info></param><param path="/proc/sys/fs/xfs/stats_clear"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.stats_clear		(Min: 0  Default: 0  Max: 1)
Setting this to &quot;1&quot; clears accumulated XFS statistics
in /proc/fs/xfs/stat.  It then immediately resets to &quot;0&quot;.</info></param><param path="/proc/sys/fs/xfs/xfsbufd_centisecs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.xfsbufd_centisecs	(Min: 50  Default: 100	Max: 3000)
Dirty metadata is now tracked by the log subsystem and
flushing is driven by log space and idling demands. The
xfsbufd no longer exists, so this syctl does nothing.

Due for removal in 3.14.</info></param><param path="/proc/sys/fs/xfs/xfssyncd_centisecs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>fs.xfs.xfssyncd_centisecs	(Min: 100  Default: 3000  Max: 720000)
The interval at which the filesystem flushes metadata
out to disk and runs internal cache cleanup routines.</info></param><param path="/proc/sys/dev/scsi/logging_level"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>scsi_logging_level=	[SCSI] a bit mask of logging levels
		See drivers/scsi/scsi_logging.h for bits.  Also
		settable via sysctl at dev.scsi.logging_level
		(/proc/sys/dev/scsi/logging_level).
		There is also a nice 'scsi_logging_level' script in the
		S390-tools package, available for download at
		http://www-128.ibm.com/developerworks/linux/linux390/s390-tools-1.5.4.html</info></param><param path="/proc/sys/net/bridge/bridge-nf-call-arptables"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>bridge-nf-call-arptables - BOOLEAN
	1 : pass bridged ARP traffic to arptables' FORWARD chain.
	0 : disable this.
	Default: 1</info></param><param path="/proc/sys/net/bridge/bridge-nf-call-ip6tables"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>bridge-nf-call-ip6tables - BOOLEAN
	1 : pass bridged IPv6 traffic to ip6tables' chains.
	0 : disable this.
	Default: 1</info></param><param path="/proc/sys/net/bridge/bridge-nf-call-iptables"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>bridge-nf-call-iptables - BOOLEAN
	1 : pass bridged IPv4 traffic to iptables' chains.
	0 : disable this.
	Default: 1</info></param><param path="/proc/sys/net/bridge/bridge-nf-filter-pppoe-tagged"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>bridge-nf-filter-pppoe-tagged - BOOLEAN
	1 : pass bridged pppoe-tagged IP/IPv6 traffic to {ip,ip6}tables.
	0 : disable this.
	Default: 0
</info></param><param path="/proc/sys/net/bridge/bridge-nf-filter-vlan-tagged"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>bridge-nf-filter-vlan-tagged - BOOLEAN
	1 : pass bridged vlan-tagged ARP/IP/IPv6 traffic to {arp,ip,ip6}tables.
	0 : disable this.
	Default: 0</info></param><param path="/proc/sys/net/bridge/bridge-nf-pass-vlan-input-dev"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>bridge-nf-pass-vlan-input-dev - BOOLEAN
	1: if bridge-nf-filter-vlan-tagged is enabled, try to find a vlan
	interface on the bridge and set the netfilter input device to the vlan.
	This allows use of e.g. &quot;iptables -i br0.1&quot; and makes the REDIRECT
	target work with vlan-on-top-of-bridge interfaces.  When no matching
	vlan interface is found, or this switch is off, the input device is
	set to the bridge interface.
	0: disable bridge netfilter vlan interface lookup.
	Default: 0</info></param><param path="/proc/sys/net/core/bpf_jit_enable"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>This enables Berkeley Packet Filter Just in Time compiler.
Currently supported on x86_64 architecture, bpf_jit provides a framework
to speed packet filtering, the one used by tcpdump/libpcap for example.
Values :
	0 - disable the JIT (default value)
	1 - enable the JIT
	2 - enable the JIT and ask the compiler to emit traces on kernel log.</info></param><param path="/proc/sys/net/core/busy_poll"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Low latency busy poll timeout for poll and select. (needs CONFIG_NET_RX_BUSY_POLL)
Approximate time in us to busy loop waiting for events.
Recommended value depends on the number of sockets you poll on.
For several sockets 50, for several hundreds 100.
For more than that you probably want to use epoll.
Note that only sockets with SO_BUSY_POLL set will be busy polled,
so you want to either selectively set SO_BUSY_POLL on those sockets or set
sysctl.net.busy_read globally.
Will increase power usage.
Default: 0 (off)</info></param><param path="/proc/sys/net/core/busy_read"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Low latency busy poll timeout for socket reads. (needs CONFIG_NET_RX_BUSY_POLL)
Approximate time in us to busy loop waiting for packets on the device queue.
This sets the default value of the SO_BUSY_POLL socket option.
Can be set or overridden per socket by setting socket option SO_BUSY_POLL,
which is the preferred method of enabling. If you need to enable the feature
globally via sysctl, a value of 50 is recommended.
Will increase power usage.
Default: 0 (off)</info></param><param path="/proc/sys/net/core/default_qdisc"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The default queuing discipline to use for network devices. This allows
overriding the default queue discipline of pfifo_fast with an
alternative. Since the default queuing discipline is created with the
no additional parameters so is best suited to queuing disciplines that
work well without configuration like stochastic fair queue (sfq),
CoDel (codel) or fair queue CoDel (fq_codel). Don't use queuing disciplines
like Hierarchical Token Bucket or Deficit Round Robin which require setting
up classes and bandwidths.
Default: pfifo_fast</info></param><param path="/proc/sys/net/core/dev_weight"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>The maximum number of packets that kernel can handle on a NAPI interrupt,
it's a Per-CPU variable.
Default: 64</info></param><param path="/proc/sys/net/core/message_burst"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>message_burst and message_cost
------------------------------

These parameters  are used to limit the warning messages written to the kernel
log from  the  networking  code.  They  enforce  a  rate  limit  to  make  a
denial-of-service attack  impossible. A higher message_cost factor, results in
fewer messages that will be written. Message_burst controls when messages will
be dropped.  The  default  settings  limit  warning messages to one every five
seconds.</info></param><param path="/proc/sys/net/core/message_cost"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>message_burst and message_cost
------------------------------

These parameters  are used to limit the warning messages written to the kernel
log from  the  networking  code.  They  enforce  a  rate  limit  to  make  a
denial-of-service attack  impossible. A higher message_cost factor, results in
fewer messages that will be written. Message_burst controls when messages will
be dropped.  The  default  settings  limit  warning messages to one every five
seconds.</info></param><param path="/proc/sys/net/core/netdev_budget"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>netdev_budget
-------------

Maximum number of packets taken from all interfaces in one polling cycle (NAPI
poll). In one polling cycle interfaces which are registered to polling are
probed in a round-robin manner.</info></param><param path="/proc/sys/net/core/netdev_max_backlog"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>netdev_max_backlog
------------------

Maximum number  of  packets,  queued  on  the  INPUT  side, when the interface
receives packets faster than kernel can process them.</info></param><param path="/proc/sys/net/core/netdev_tstamp_prequeue"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>netdev_tstamp_prequeue
----------------------

If set to 0, RX packet timestamps can be sampled after RPS processing, when
the target CPU processes packets. It might give some delay on timestamps, but
permit to distribute the load on several cpus.

If set to 1 (default), timestamps are sampled as soon as possible, before
queueing.</info></param><param path="/proc/sys/net/core/optmem_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>optmem_max
----------

Maximum ancillary buffer size allowed per socket. Ancillary data is a sequence
of struct cmsghdr structures with appended data.</info></param><param path="/proc/sys/net/core/rmem_default"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>rmem_default
------------

The default setting of the socket receive buffer in bytes.</info></param><param path="/proc/sys/net/core/rmem_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>rmem_max
--------

The maximum receive socket buffer size in bytes.</info></param><param path="/proc/sys/net/core/warnings"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>warnings
--------

This controls console messages from the networking stack that can occur because
of problems on the network like duplicate address or bad checksums. Normally,
this should be enabled, but if the problem persists the messages can be
disabled.</info></param><param path="/proc/sys/net/core/wmem_default"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>wmem_default
------------

The default setting (in bytes) of the socket send buffer.</info></param><param path="/proc/sys/net/core/wmem_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>wmem_max
--------

The maximum send socket buffer size in bytes.</info></param><param path="/proc/sys/net/ipv4/cipso_cache_bucket_size"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>cipso_cache_bucket_size - INTEGER
	The CIPSO label cache consists of a fixed size hash table with each
	hash bucket containing a number of cache entries.  This variable limits
	the number of entries in each hash bucket; the larger the value the
	more CIPSO label mappings that can be cached.  When the number of
	entries in a given hash bucket reaches this limit adding new entries
	causes the oldest entry in the bucket to be removed to make room.
	Default: 10</info></param><param path="/proc/sys/net/ipv4/cipso_cache_enable"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>cipso_cache_enable - BOOLEAN
	If set, enable additions to and lookups from the CIPSO label mapping
	cache.  If unset, additions are ignored and lookups always result in a
	miss.  However, regardless of the setting the cache is still
	invalidated when required when means you can safely toggle this on and
	off and the cache will always be &quot;safe&quot;.
	Default: 1</info></param><param path="/proc/sys/net/ipv4/cipso_rbm_optfmt"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>cipso_rbm_optfmt - BOOLEAN
	Enable the &quot;Optimized Tag 1 Format&quot; as defined in section 3.4.2.6 of
	the CIPSO draft specification (see Documentation/netlabel for details).
	This means that when set the CIPSO tag will be padded with empty
	categories in order to make the packet data 32-bit aligned.
	Default: 0</info></param><param path="/proc/sys/net/ipv4/cipso_rbm_strictvalid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>cipso_rbm_strictvalid - BOOLEAN
	If set, do a very strict check of the CIPSO option when
	ip_options_compile() is called.  If unset, relax the checks done during
	ip_options_compile().  Either way is &quot;safe&quot; as errors are caught else
	where in the CIPSO processing code but setting this to 0 (False) should
	result in less work (i.e. it should be faster) but could cause problems
	with other implementations that require strict checking.
	Default: 0</info></param><param path="/proc/sys/net/ipv4/icmp_echo_ignore_all"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>icmp_echo_ignore_all - BOOLEAN
	If set non-zero, then the kernel will ignore all ICMP ECHO
	requests sent to it.
	Default: 0</info></param><param path="/proc/sys/net/ipv4/icmp_echo_ignore_broadcasts"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>icmp_echo_ignore_broadcasts - BOOLEAN
	If set non-zero, then the kernel will ignore all ICMP ECHO and
	TIMESTAMP requests sent to it via broadcast/multicast.
	Default: 1</info></param><param path="/proc/sys/net/ipv4/icmp_errors_use_inbound_ifaddr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>icmp_errors_use_inbound_ifaddr - BOOLEAN

	If zero, icmp error messages are sent with the primary address of
	the exiting interface.

	If non-zero, the message will be sent with the primary address of
	the interface that received the packet that caused the icmp error.
	This is the behaviour network many administrators will expect from
	a router. And it can make debugging complicated network layouts
	much easier.

	Note that if no primary address exists for the interface selected,
	then the primary address of the first non-loopback interface that
	has one will be used regardless of this setting.

	Default: 0</info></param><param path="/proc/sys/net/ipv4/icmp_ignore_bogus_error_responses"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>icmp_ignore_bogus_error_responses - BOOLEAN
	Some routers violate RFC1122 by sending bogus responses to broadcast
	frames.  Such violations are normally logged via a kernel warning.
	If this is set to TRUE, the kernel will not give such warnings, which
	will avoid log file clutter.
	Default: 1</info></param><param path="/proc/sys/net/ipv4/icmp_ratelimit"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>icmp_ratelimit - INTEGER
	Limit the maximal rates for sending ICMP packets whose type matches
	icmp_ratemask (see below) to specific targets.
	0 to disable any limiting,
	otherwise the minimal space between responses in milliseconds.
	Note that another sysctl, icmp_msgs_per_sec limits the number
	of ICMP packets	sent on all targets.
	Default: 1000</info></param><param path="/proc/sys/net/ipv4/icmp_ratemask"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>icmp_ratemask - INTEGER
	Mask made of ICMP types for which rates are being limited.
	Significant bits: IHGFEDCBA9876543210
	Default mask:     0000001100000011000 (6168)

	Bit definitions (see include/linux/icmp.h):
		0 Echo Reply
		3 Destination Unreachable *
		4 Source Quench *
		5 Redirect
		8 Echo Request
		B Time Exceeded *
		C Parameter Problem *
		D Timestamp Request
		E Timestamp Reply
		F Info Request
		G Info Reply
		H Address Mask Request
		I Address Mask Reply

	* These are rate limited by default (see default mask above)</info></param><param path="/proc/sys/net/ipv4/igmp_max_memberships"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>igmp_max_memberships - INTEGER
	Change the maximum number of multicast groups we can subscribe to.
	Default: 20

	Theoretical maximum value is bounded by having to send a membership
	report in a single datagram (i.e. the report can't span multiple
	datagrams, or risk confusing the switch and leaving groups you don't
	intend to).

	The number of supported groups 'M' is bounded by the number of group
	report entries you can fit into a single datagram of 65535 bytes.

	M = 65536-sizeof (ip header)/(sizeof(Group record))

	Group records are variable length, with a minimum of 12 bytes.
	So net.ipv4.igmp_max_memberships should not be set higher than:

	(65536-24) / 12 = 5459

	The value 5459 assumes no IP header options, so in practice
	this number may be lower.

	conf/interface/*  changes special settings per interface (where
	&quot;interface&quot; is the name of your network interface)

	conf/all/*	  is special, changes the settings for all interfaces</info></param><param path="/proc/sys/net/ipv4/igmp_qrv"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>igmp_qrv - INTEGER
	 Controls the IGMP query robustness variable (see RFC2236 8.1).
	 Default: 2 (as specified by RFC2236 8.1)
	 Minimum: 1 (as specified by RFC6636 4.5)</info></param><param path="/proc/sys/net/ipv4/inet_peer_maxttl"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>inet_peer_maxttl - INTEGER
	Maximum time-to-live of entries.  Unused entries will expire after
	this period of time if there is no memory pressure on the pool (i.e.
	when the number of entries in the pool is very small).
	Measured in seconds.</info></param><param path="/proc/sys/net/ipv4/inet_peer_minttl"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>inet_peer_minttl - INTEGER
	Minimum time-to-live of entries.  Should be enough to cover fragment
	time-to-live on the reassembling side.  This minimum time-to-live  is
	guaranteed if the pool size is less than inet_peer_threshold.
	Measured in seconds.</info></param><param path="/proc/sys/net/ipv4/inet_peer_threshold"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>inet_peer_threshold - INTEGER
	The approximate size of the storage.  Starting from this threshold
	entries will be thrown aggressively.  This threshold also determines
	entries' time-to-live and time intervals between garbage collection
	passes.  More entries, less time-to-live, less GC interval.</info></param><param path="/proc/sys/net/ipv4/ip_default_ttl"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip_default_ttl - INTEGER
	Default value of TTL field (Time To Live) for outgoing (but not
	forwarded) IP packets. Should be between 1 and 255 inclusive.
	Default: 64 (as recommended by RFC1700)</info></param><param path="/proc/sys/net/ipv4/ip_dynaddr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip_dynaddr - BOOLEAN
	If set non-zero, enables support for dynamic addresses.
	If set to a non-zero value larger than 1, a kernel log
	message will be printed when dynamic address rewriting
	occurs.
	Default: 0</info></param><param path="/proc/sys/net/ipv4/ip_early_demux"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip_early_demux - BOOLEAN
	Optimize input packet processing down to one demux for
	certain kinds of local sockets.  Currently we only do this
	for established TCP sockets.

	It may add an additional cost for pure routing workloads that
	reduces overall throughput, in such case you should disable it.
	Default: 1</info></param><param path="/proc/sys/net/ipv4/ip_forward"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip_forward - BOOLEAN
	0 - disabled (default)
	not 0 - enabled

	Forward Packets between interfaces.

	This variable is special, its change resets all configuration
	parameters to their default state (RFC1122 for hosts, RFC1812
	for routers)</info></param><param path="/proc/sys/net/ipv4/ip_forward_use_pmtu"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip_forward_use_pmtu - BOOLEAN
	By default we don't trust protocol path MTUs while forwarding
	because they could be easily forged and can lead to unwanted
	fragmentation by the router.
	You only need to enable this if you have user-space software
	which tries to discover path mtus by itself and depends on the
	kernel honoring this information. This is normally not the
	case.
	Default: 0 (disabled)
	Possible values:
	0 - disabled
	1 - enabled</info></param><param path="/proc/sys/net/ipv4/ip_local_port_range"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip_local_port_range - 2 INTEGERS
	Defines the local port range that is used by TCP and UDP to
	choose the local port. The first number is the first, the
	second the last local port number. The default values are
	32768 and 61000 respectively.</info></param><param path="/proc/sys/net/ipv4/ip_local_reserved_ports"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip_local_reserved_ports - list of comma separated ranges
	Specify the ports which are reserved for known third-party
	applications. These ports will not be used by automatic port
	assignments (e.g. when calling connect() or bind() with port
	number 0). Explicit port allocation behavior is unchanged.

	The format used for both input and output is a comma separated
	list of ranges (e.g. &quot;1,2-4,10-10&quot; for ports 1, 2, 3, 4 and
	10). Writing to the file will clear all previously reserved
	ports and update the current list with the one given in the
	input.

	Note that ip_local_port_range and ip_local_reserved_ports
	settings are independent and both are considered by the kernel
	when determining which ports are available for automatic port
	assignments.

	You can reserve ports which are not in the current
	ip_local_port_range, e.g.:

	$ cat /proc/sys/net/ipv4/ip_local_port_range
	32000	61000
	$ cat /proc/sys/net/ipv4/ip_local_reserved_ports
	8080,9148

	although this is redundant. However such a setting is useful
	if later the port range is changed to a value that will
	include the reserved ports.

	Default: Empty</info></param><param path="/proc/sys/net/ipv4/ip_no_pmtu_disc"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip_no_pmtu_disc - INTEGER
	Disable Path MTU Discovery. If enabled in mode 1 and a
	fragmentation-required ICMP is received, the PMTU to this
	destination will be set to min_pmtu (see below). You will need
	to raise min_pmtu to the smallest interface MTU on your system
	manually if you want to avoid locally generated fragments.

	In mode 2 incoming Path MTU Discovery messages will be
	discarded. Outgoing frames are handled the same as in mode 1,
	implicitly setting IP_PMTUDISC_DONT on every created socket.

	Mode 3 is a hardend pmtu discover mode. The kernel will only
	accept fragmentation-needed errors if the underlying protocol
	can verify them besides a plain socket lookup. Current
	protocols for which pmtu events will be honored are TCP, SCTP
	and DCCP as they verify e.g. the sequence number or the
	association. This mode should not be enabled globally but is
	only intended to secure e.g. name servers in namespaces where
	TCP path mtu must still work but path MTU information of other
	protocols should be discarded. If enabled globally this mode
	could break other protocols.

	Possible values: 0-3
	Default: FALSE</info></param><param path="/proc/sys/net/ipv4/ip_nonlocal_bind"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip_nonlocal_bind - BOOLEAN
	If set, allows processes to bind() to non-local IP addresses,
	which can be quite useful - but may break some applications.
	Default: 0</info></param><param path="/proc/sys/net/ipv4/ipfrag_high_thresh"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ipfrag_high_thresh - INTEGER
	Maximum memory used to reassemble IP fragments. When
	ipfrag_high_thresh bytes of memory is allocated for this purpose,
	the fragment handler will toss packets until ipfrag_low_thresh
	is reached. This also serves as a maximum limit to namespaces
	different from the initial one.</info></param><param path="/proc/sys/net/ipv4/ipfrag_low_thresh"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ipfrag_low_thresh - INTEGER
	Maximum memory used to reassemble IP fragments before the kernel
	begins to remove incomplete fragment queues to free up resources.
	The kernel still accepts new fragments for defragmentation.</info></param><param path="/proc/sys/net/ipv4/ipfrag_max_dist"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ipfrag_max_dist - INTEGER
	ipfrag_max_dist is a non-negative integer value which defines the
	maximum &quot;disorder&quot; which is allowed among fragments which share a
	common IP source address. Note that reordering of packets is
	not unusual, but if a large number of fragments arrive from a source
	IP address while a particular fragment queue remains incomplete, it
	probably indicates that one or more fragments belonging to that queue
	have been lost. When ipfrag_max_dist is positive, an additional check
	is done on fragments before they are added to a reassembly queue - if
	ipfrag_max_dist (or more) fragments have arrived from a particular IP
	address between additions to any IP fragment queue using that source
	address, it's presumed that one or more fragments in the queue are
	lost. The existing fragment queue will be dropped, and a new one
	started. An ipfrag_max_dist value of zero disables this check.

	Using a very small value, e.g. 1 or 2, for ipfrag_max_dist can
	result in unnecessarily dropping fragment queues when normal
	reordering of packets occurs, which could lead to poor application
	performance. Using a very large value, e.g. 50000, increases the
	likelihood of incorrectly reassembling IP fragments that originate
	from different IP datagrams, which could result in data corruption.
	Default: 64</info></param><param path="/proc/sys/net/ipv4/ipfrag_time"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ipfrag_time - INTEGER
	Time in seconds to keep an IP fragment in memory.</info></param><param path="/proc/sys/net/ipv4/tcp_abort_on_overflow"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_abort_on_overflow - BOOLEAN
	If listening service is too slow to accept new connections,
	reset them. Default state is FALSE. It means that if overflow
	occurred due to a burst, connection will recover. Enable this
	option _only_ if you are really sure that listening daemon
	cannot be tuned to accept connections faster. Enabling this
	option can harm clients of your server.</info></param><param path="/proc/sys/net/ipv4/tcp_adv_win_scale"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_adv_win_scale - INTEGER
	Count buffering overhead as bytes/2^tcp_adv_win_scale
	(if tcp_adv_win_scale &gt; 0) or bytes-bytes/2^(-tcp_adv_win_scale),
	if it is &lt;= 0.
	Possible values are [-31, 31], inclusive.
	Default: 1</info></param><param path="/proc/sys/net/ipv4/tcp_allowed_congestion_control"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_allowed_congestion_control - STRING
	Show/set the congestion control choices available to non-privileged
	processes. The list is a subset of those listed in
	tcp_available_congestion_control.
	Default is &quot;reno&quot; and the default setting (tcp_congestion_control).</info></param><param path="/proc/sys/net/ipv4/tcp_app_win"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_app_win - INTEGER
	Reserve max(window/2^tcp_app_win, mss) of window for application
	buffer. Value 0 is special, it means that nothing is reserved.
	Default: 31</info></param><param path="/proc/sys/net/ipv4/tcp_available_congestion_control"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_available_congestion_control - STRING
	Shows the available congestion control choices that are registered.
	More congestion control algorithms may be available as modules,
	but not loaded.</info></param><param path="/proc/sys/net/ipv4/tcp_base_mss"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_base_mss - INTEGER
	The initial value of search_low to be used by the packetization layer
	Path MTU discovery (MTU probing).  If MTU probing is enabled,
	this is the initial MSS used by the connection.</info></param><param path="/proc/sys/net/ipv4/tcp_challenge_ack_limit"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_challenge_ack_limit - INTEGER
	Limits number of Challenge ACK sent per second, as recommended
	in RFC 5961 (Improving TCP's Robustness to Blind In-Window Attacks)
	Default: 100</info></param><param path="/proc/sys/net/ipv4/tcp_congestion_control"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_congestion_control - STRING
	Set the congestion control algorithm to be used for new
	connections. The algorithm &quot;reno&quot; is always available, but
	additional choices may be available based on kernel configuration.
	Default is set as part of kernel configuration.
	For passive connections, the listener congestion control choice
	is inherited.
	[see setsockopt(listenfd, SOL_TCP, TCP_CONGESTION, &quot;name&quot; ...) ]</info></param><param path="/proc/sys/net/ipv4/tcp_dsack"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_dsack - BOOLEAN
	Allows TCP to send &quot;duplicate&quot; SACKs.</info></param><param path="/proc/sys/net/ipv4/tcp_early_retrans"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_early_retrans - INTEGER
	Enable Early Retransmit (ER), per RFC 5827. ER lowers the threshold
	for triggering fast retransmit when the amount of outstanding data is
	small and when no previously unsent data can be transmitted (such
	that limited transmit could be used). Also controls the use of
	Tail loss probe (TLP) that converts RTOs occurring due to tail
	losses into fast recovery (draft-dukkipati-tcpm-tcp-loss-probe-01).
	Possible values:
		0 disables ER
		1 enables ER
		2 enables ER but delays fast recovery and fast retransmit
		  by a fourth of RTT. This mitigates connection falsely
		  recovers when network has a small degree of reordering
		  (less than 3 packets).
		3 enables delayed ER and TLP.
		4 enables TLP only.
	Default: 3</info></param><param path="/proc/sys/net/ipv4/tcp_ecn"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_ecn - INTEGER
	Control use of Explicit Congestion Notification (ECN) by TCP.
	ECN is used only when both ends of the TCP connection indicate
	support for it.  This feature is useful in avoiding losses due
	to congestion by allowing supporting routers to signal
	congestion before having to drop packets.
	Possible values are:
		0 Disable ECN.  Neither initiate nor accept ECN.
		1 Enable ECN when requested by incoming connections and
		  also request ECN on outgoing connection attempts.
		2 Enable ECN when requested by incoming connections
		  but do not request ECN on outgoing connections.
	Default: 2</info></param><param path="/proc/sys/net/ipv4/tcp_fack"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_fack - BOOLEAN
	Enable FACK congestion avoidance and fast retransmission.
	The value is not used, if tcp_sack is not enabled.</info></param><param path="/proc/sys/net/ipv4/tcp_fastopen"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_fastopen - INTEGER
	Enable TCP Fast Open feature (draft-ietf-tcpm-fastopen) to send data
	in the opening SYN packet. To use this feature, the client application
	must use sendmsg() or sendto() with MSG_FASTOPEN flag rather than
	connect() to perform a TCP handshake automatically.

	The values (bitmap) are
	1: Enables sending data in the opening SYN on the client w/ MSG_FASTOPEN.
	2: Enables TCP Fast Open on the server side, i.e., allowing data in
	   a SYN packet to be accepted and passed to the application before
	   3-way hand shake finishes.
	4: Send data in the opening SYN regardless of cookie availability and
	   without a cookie option.
	0x100: Accept SYN data w/o validating the cookie.
	0x200: Accept data-in-SYN w/o any cookie option present.
	0x400/0x800: Enable Fast Open on all listeners regardless of the
	   TCP_FASTOPEN socket option. The two different flags designate two
	   different ways of setting max_qlen without the TCP_FASTOPEN socket
	   option.

	Default: 1

	Note that the client &amp; server side Fast Open flags (1 and 2
	respectively) must be also enabled before the rest of flags can take
	effect.

	See include/net/tcp.h and the code for more details.</info></param><param path="/proc/sys/net/ipv4/tcp_fin_timeout"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_fin_timeout - INTEGER
	The length of time an orphaned (no longer referenced by any
	application) connection will remain in the FIN_WAIT_2 state
	before it is aborted at the local end.  While a perfectly
	valid &quot;receive only&quot; state for an un-orphaned connection, an
	orphaned connection in FIN_WAIT_2 state could otherwise wait
	forever for the remote to close its end of the connection.
	Cf. tcp_max_orphans
	Default: 60 seconds</info></param><param path="/proc/sys/net/ipv4/tcp_frto"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_frto - INTEGER
	Enables Forward RTO-Recovery (F-RTO) defined in RFC5682.
	F-RTO is an enhanced recovery algorithm for TCP retransmission
	timeouts.  It is particularly beneficial in networks where the
	RTT fluctuates (e.g., wireless). F-RTO is sender-side only
	modification. It does not require any support from the peer.

	By default it's enabled with a non-zero value. 0 disables F-RTO.</info></param><param path="/proc/sys/net/ipv4/tcp_keepalive_intvl"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_keepalive_intvl - INTEGER
	How frequently the probes are send out. Multiplied by
	tcp_keepalive_probes it is time to kill not responding connection,
	after probes started. Default value: 75sec i.e. connection
	will be aborted after ~11 minutes of retries.</info></param><param path="/proc/sys/net/ipv4/tcp_keepalive_probes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_keepalive_probes - INTEGER
	How many keepalive probes TCP sends out, until it decides that the
	connection is broken. Default value: 9.</info></param><param path="/proc/sys/net/ipv4/tcp_keepalive_time"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_keepalive_time - INTEGER
	How often TCP sends out keepalive messages when keepalive is enabled.
	Default: 2hours.</info></param><param path="/proc/sys/net/ipv4/tcp_limit_output_bytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_limit_output_bytes - INTEGER
	Controls TCP Small Queue limit per tcp socket.
	TCP bulk sender tends to increase packets in flight until it
	gets losses notifications. With SNDBUF autotuning, this can
	result in a large amount of packets queued in qdisc/device
	on the local machine, hurting latency of other flows, for
	typical pfifo_fast qdiscs.
	tcp_limit_output_bytes limits the number of bytes on qdisc
	or device to reduce artificial RTT/cwnd and reduce bufferbloat.
	Default: 131072</info></param><param path="/proc/sys/net/ipv4/tcp_low_latency"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_low_latency - BOOLEAN
	If set, the TCP stack makes decisions that prefer lower
	latency as opposed to higher throughput.  By default, this
	option is not set meaning that higher throughput is preferred.
	An example of an application where this default should be
	changed would be a Beowulf compute cluster.
	Default: 0</info></param><param path="/proc/sys/net/ipv4/tcp_max_orphans"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_max_orphans - INTEGER
	Maximal number of TCP sockets not attached to any user file handle,
	held by system.	If this number is exceeded orphaned connections are
	reset immediately and warning is printed. This limit exists
	only to prevent simple DoS attacks, you _must_ not rely on this
	or lower the limit artificially, but rather increase it
	(probably, after increasing installed memory),
	if network conditions require more than default value,
	and tune network services to linger and kill such states
	more aggressively. Let me to remind again: each orphan eats
	up to ~64K of unswappable memory.</info></param><param path="/proc/sys/net/ipv4/tcp_max_syn_backlog"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_max_syn_backlog - INTEGER
	Maximal number of remembered connection requests, which have not
	received an acknowledgment from connecting client.
	The minimal value is 128 for low memory machines, and it will
	increase in proportion to the memory of machine.
	If server suffers from overload, try increasing this number.</info></param><param path="/proc/sys/net/ipv4/tcp_max_tw_buckets"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_max_tw_buckets - INTEGER
	Maximal number of timewait sockets held by system simultaneously.
	If this number is exceeded time-wait socket is immediately destroyed
	and warning is printed. This limit exists only to prevent
	simple DoS attacks, you _must_ not lower the limit artificially,
	but rather increase it (probably, after increasing installed memory),
	if network conditions require more than default value.</info></param><param path="/proc/sys/net/ipv4/tcp_mem"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_mem - vector of 3 INTEGERs: min, pressure, max
	min: below this number of pages TCP is not bothered about its
	memory appetite.

	pressure: when amount of memory allocated by TCP exceeds this number
	of pages, TCP moderates its memory consumption and enters memory
	pressure mode, which is exited when memory consumption falls
	under &quot;min&quot;.

	max: number of pages allowed for queueing by all TCP sockets.

	Defaults are calculated at boot time from amount of available
	memory.</info></param><param path="/proc/sys/net/ipv4/tcp_min_tso_segs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_min_tso_segs - INTEGER
	Minimal number of segments per TSO frame.
	Since linux-3.12, TCP does an automatic sizing of TSO frames,
	depending on flow rate, instead of filling 64Kbytes packets.
	For specific usages, it's possible to force TCP to build big
	TSO frames. Note that TCP stack might split too big TSO packets
	if available window is too small.
	Default: 2</info></param><param path="/proc/sys/net/ipv4/tcp_moderate_rcvbuf"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_moderate_rcvbuf - BOOLEAN
	If set, TCP performs receive buffer auto-tuning, attempting to
	automatically size the buffer (no greater than tcp_rmem[2]) to
	match the size required by the path for full throughput.  Enabled by
	default.</info></param><param path="/proc/sys/net/ipv4/tcp_mtu_probing"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_mtu_probing - INTEGER
	Controls TCP Packetization-Layer Path MTU Discovery.  Takes three
	values:
	  0 - Disabled
	  1 - Disabled by default, enabled when an ICMP black hole detected
	  2 - Always enabled, use initial MSS of tcp_base_mss.</info></param><param path="/proc/sys/net/ipv4/tcp_no_metrics_save"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_no_metrics_save - BOOLEAN
	By default, TCP saves various connection metrics in the route cache
	when the connection closes, so that connections established in the
	near future can use these to set initial conditions.  Usually, this
	increases overall performance, but may sometimes cause performance
	degradation.  If set, TCP will not cache metrics on closing
	connections.</info></param><param path="/proc/sys/net/ipv4/tcp_orphan_retries"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_orphan_retries - INTEGER
	This value influences the timeout of a locally closed TCP connection,
	when RTO retransmissions remain unacknowledged.
	See tcp_retries2 for more details.

	The default value is 8.
	If your machine is a loaded WEB server,
	you should think about lowering this value, such sockets
	may consume significant resources. Cf. tcp_max_orphans.</info></param><param path="/proc/sys/net/ipv4/tcp_reordering"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_reordering - INTEGER
	Maximal reordering of packets in a TCP stream.
	Default: 3</info></param><param path="/proc/sys/net/ipv4/tcp_retrans_collapse"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_retrans_collapse - BOOLEAN
	Bug-to-bug compatibility with some broken printers.
	On retransmit try to send bigger packets to work around bugs in
	certain TCP stacks.</info></param><param path="/proc/sys/net/ipv4/tcp_retries1"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_retries1 - INTEGER
	This value influences the time, after which TCP decides, that
	something is wrong due to unacknowledged RTO retransmissions,
	and reports this suspicion to the network layer.
	See tcp_retries2 for more details.

	RFC 1122 recommends at least 3 retransmissions, which is the
	default.</info></param><param path="/proc/sys/net/ipv4/tcp_retries2"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_retries2 - INTEGER
	This value influences the timeout of an alive TCP connection,
	when RTO retransmissions remain unacknowledged.
	Given a value of N, a hypothetical TCP connection following
	exponential backoff with an initial RTO of TCP_RTO_MIN would
	retransmit N times before killing the connection at the (N+1)th RTO.

	The default value of 15 yields a hypothetical timeout of 924.6
	seconds and is a lower bound for the effective timeout.
	TCP will effectively time out at the first RTO which exceeds the
	hypothetical timeout.

	RFC 1122 recommends at least 100 seconds for the timeout,
	which corresponds to a value of at least 8.</info></param><param path="/proc/sys/net/ipv4/tcp_rfc1337"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_rfc1337 - BOOLEAN
	If set, the TCP stack behaves conforming to RFC1337. If unset,
	we are not conforming to RFC, but prevent TCP TIME_WAIT
	assassination.
	Default: 0</info></param><param path="/proc/sys/net/ipv4/tcp_rmem"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_rmem - vector of 3 INTEGERs: min, default, max
	min: Minimal size of receive buffer used by TCP sockets.
	It is guaranteed to each TCP socket, even under moderate memory
	pressure.
	Default: 1 page

	default: initial size of receive buffer used by TCP sockets.
	This value overrides net.core.rmem_default used by other protocols.
	Default: 87380 bytes. This value results in window of 65535 with
	default setting of tcp_adv_win_scale and tcp_app_win:0 and a bit
	less for default tcp_app_win. See below about these variables.

	max: maximal size of receive buffer allowed for automatically
	selected receiver buffers for TCP socket. This value does not override
	net.core.rmem_max.  Calling setsockopt() with SO_RCVBUF disables
	automatic tuning of that socket's receive buffer size, in which
	case this value is ignored.
	Default: between 87380B and 6MB, depending on RAM size.</info></param><param path="/proc/sys/net/ipv4/tcp_sack"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_sack - BOOLEAN
	Enable select acknowledgments (SACKS).</info></param><param path="/proc/sys/net/ipv4/tcp_slow_start_after_idle"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_slow_start_after_idle - BOOLEAN
	If set, provide RFC2861 behavior and time out the congestion
	window after an idle period.  An idle period is defined at
	the current RTO.  If unset, the congestion window will not
	be timed out after an idle period.
	Default: 1</info></param><param path="/proc/sys/net/ipv4/tcp_stdurg"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_stdurg - BOOLEAN
	Use the Host requirements interpretation of the TCP urgent pointer field.
	Most hosts use the older BSD interpretation, so if you turn this on
	Linux might not communicate correctly with them.
	Default: FALSE</info></param><param path="/proc/sys/net/ipv4/tcp_syn_retries"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_syn_retries - INTEGER
	Number of times initial SYNs for an active TCP connection attempt
	will be retransmitted. Should not be higher than 255. Default value
	is 6, which corresponds to 63seconds till the last retransmission
	with the current initial RTO of 1second. With this the final timeout
	for an active TCP connection attempt will happen after 127seconds.</info></param><param path="/proc/sys/net/ipv4/tcp_synack_retries"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_synack_retries - INTEGER
	Number of times SYNACKs for a passive TCP connection attempt will
	be retransmitted. Should not be higher than 255. Default value
	is 5, which corresponds to 31seconds till the last retransmission
	with the current initial RTO of 1second. With this the final timeout
	for a passive TCP connection will happen after 63seconds.</info></param><param path="/proc/sys/net/ipv4/tcp_syncookies"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_syncookies - BOOLEAN
	Only valid when the kernel was compiled with CONFIG_SYN_COOKIES
	Send out syncookies when the syn backlog queue of a socket
	overflows. This is to prevent against the common 'SYN flood attack'
	Default: 1

	Note, that syncookies is fallback facility.
	It MUST NOT be used to help highly loaded servers to stand
	against legal connection rate. If you see SYN flood warnings
	in your logs, but investigation	shows that they occur
	because of overload with legal connections, you should tune
	another parameters until this warning disappear.
	See: tcp_max_syn_backlog, tcp_synack_retries, tcp_abort_on_overflow.

	syncookies seriously violate TCP protocol, do not allow
	to use TCP extensions, can result in serious degradation
	of some services (f.e. SMTP relaying), visible not by you,
	but your clients and relays, contacting you. While you see
	SYN flood warnings in logs not being really flooded, your server
	is seriously misconfigured.

	If you want to test which effects syncookies have to your
	network connections you can set this knob to 2 to enable
	unconditionally generation of syncookies.</info></param><param path="/proc/sys/net/ipv4/tcp_thin_dupack"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_thin_dupack - BOOLEAN
	Enable dynamic triggering of retransmissions after one dupACK
	for thin streams. If set, a check is performed upon reception
	of a dupACK to determine if the stream is thin (less than 4
	packets in flight). As long as the stream is found to be thin,
	data is retransmitted on the first received dupACK. This
	improves retransmission latency for non-aggressive thin
	streams, often found to be time-dependent.
	For more information on thin streams, see
	Documentation/networking/tcp-thin.txt
	Default: 0</info></param><param path="/proc/sys/net/ipv4/tcp_thin_linear_timeouts"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_thin_linear_timeouts - BOOLEAN
	Enable dynamic triggering of linear timeouts for thin streams.
	If set, a check is performed upon retransmission by timeout to
	determine if the stream is thin (less than 4 packets in flight).
	As long as the stream is found to be thin, up to 6 linear
	timeouts may be performed before exponential backoff mode is
	initiated. This improves retransmission latency for
	non-aggressive thin streams, often found to be time-dependent.
	For more information on thin streams, see
	Documentation/networking/tcp-thin.txt
	Default: 0</info></param><param path="/proc/sys/net/ipv4/tcp_timestamps"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_timestamps - BOOLEAN
	Enable timestamps as defined in RFC1323.</info></param><param path="/proc/sys/net/ipv4/tcp_tso_win_divisor"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_tso_win_divisor - INTEGER
	This allows control over what percentage of the congestion window
	can be consumed by a single TSO frame.
	The setting of this parameter is a choice between burstiness and
	building larger TSO frames.
	Default: 3</info></param><param path="/proc/sys/net/ipv4/tcp_tw_recycle"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_tw_recycle - BOOLEAN
	Enable fast recycling TIME-WAIT sockets. Default value is 0.
	It should not be changed without advice/request of technical
	experts.</info></param><param path="/proc/sys/net/ipv4/tcp_tw_reuse"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_tw_reuse - BOOLEAN
	Allow to reuse TIME-WAIT sockets for new connections when it is
	safe from protocol viewpoint. Default value is 0.
	It should not be changed without advice/request of technical
	experts.</info></param><param path="/proc/sys/net/ipv4/tcp_window_scaling"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_window_scaling - BOOLEAN
	Enable window scaling as defined in RFC1323.</info></param><param path="/proc/sys/net/ipv4/tcp_wmem"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_wmem - vector of 3 INTEGERs: min, default, max
	min: Amount of memory reserved for send buffers for TCP sockets.
	Each TCP socket has rights to use it due to fact of its birth.
	Default: 1 page

	default: initial size of send buffer used by TCP sockets.  This
	value overrides net.core.wmem_default used by other protocols.
	It is usually lower than net.core.wmem_default.
	Default: 16K

	max: Maximal amount of memory allowed for automatically tuned
	send buffers for TCP sockets. This value does not override
	net.core.wmem_max.  Calling setsockopt() with SO_SNDBUF disables
	automatic tuning of that socket's send buffer size, in which case
	this value is ignored.
	Default: between 64K and 4MB, depending on RAM size.</info></param><param path="/proc/sys/net/ipv4/tcp_workaround_signed_windows"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tcp_workaround_signed_windows - BOOLEAN
	If set, assume no receipt of a window scaling option means the
	remote TCP is broken and treats the window as a signed quantity.
	If unset, assume the remote TCP is not broken even if we do
	not receive a window scaling option from them.
	Default: 0</info></param><param path="/proc/sys/net/ipv4/udp_mem"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>udp_mem - vector of 3 INTEGERs: min, pressure, max
	Number of pages allowed for queueing by all UDP sockets.

	min: Below this number of pages UDP is not bothered about its
	memory appetite. When amount of memory allocated by UDP exceeds
	this number, UDP starts to moderate memory usage.

	pressure: This value was introduced to follow format of tcp_mem.

	max: Number of pages allowed for queueing by all UDP sockets.

	Default is calculated at boot time from amount of available memory.</info></param><param path="/proc/sys/net/ipv4/udp_rmem_min"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>udp_rmem_min - INTEGER
	Minimal size of receive buffer used by UDP sockets in moderation.
	Each UDP socket is able to use the size for receiving data, even if
	total pages of UDP sockets exceed udp_mem pressure. The unit is byte.
	Default: 1 page</info></param><param path="/proc/sys/net/ipv4/udp_wmem_min"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>udp_wmem_min - INTEGER
	Minimal size of send buffer used by UDP sockets in moderation.
	Each UDP socket is able to use the size for sending data, even if
	total pages of UDP sockets exceed udp_mem pressure. The unit is byte.
	Default: 1 page</info></param><param path="/proc/sys/net/ipv4/conf/all/accept_local"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_local - BOOLEAN
	Accept packets with local source addresses. In combination with
	suitable routing, this can be used to direct packets between two
	local interfaces over the wire and have them accepted properly.
	default FALSE</info></param><param path="/proc/sys/net/ipv4/conf/all/accept_redirects"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_redirects - BOOLEAN
	Accept Redirects.

	Functional default: enabled if local forwarding is disabled.
			    disabled if local forwarding is enabled.</info></param><param path="/proc/sys/net/ipv4/conf/all/accept_source_route"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_source_route - INTEGER
	Accept source routing (routing extension header).

	&gt;= 0: Accept only routing header type 2.
	&lt; 0: Do not accept routing header.

	Default: 0</info></param><param path="/proc/sys/net/ipv4/conf/all/arp_accept"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_accept - BOOLEAN
	Define behavior for gratuitous ARP frames who's IP is not
	already present in the ARP table:
	0 - don't create new entries in the ARP table
	1 - create new entries in the ARP table

	Both replies and requests type gratuitous arp will trigger the
	ARP table to be updated, if this setting is on.

	If the ARP table already contains the IP address of the
	gratuitous arp frame, the arp table will be updated regardless
	if this setting is on or off.</info></param><param path="/proc/sys/net/ipv4/conf/all/arp_announce"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_announce - INTEGER
	Define different restriction levels for announcing the local
	source IP address from IP packets in ARP requests sent on
	interface:
	0 - (default) Use any local address, configured on any interface
	1 - Try to avoid local addresses that are not in the target's
	subnet for this interface. This mode is useful when target
	hosts reachable via this interface require the source IP
	address in ARP requests to be part of their logical network
	configured on the receiving interface. When we generate the
	request we will check all our subnets that include the
	target IP and will preserve the source address if it is from
	such subnet. If there is no such subnet we select source
	address according to the rules for level 2.
	2 - Always use the best local address for this target.
	In this mode we ignore the source address in the IP packet
	and try to select local address that we prefer for talks with
	the target host. Such local address is selected by looking
	for primary IP addresses on all our subnets on the outgoing
	interface that include the target IP address. If no suitable
	local address is found we select the first local address
	we have on the outgoing interface or on all other interfaces,
	with the hope we will receive reply for our request and
	even sometimes no matter the source IP address we announce.

	The max value from conf/{all,interface}/arp_announce is used.

	Increasing the restriction level gives more chance for
	receiving answer from the resolved target while decreasing
	the level announces more valid sender's information.</info></param><param path="/proc/sys/net/ipv4/conf/all/arp_filter"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_filter - BOOLEAN
	1 - Allows you to have multiple network interfaces on the same
	subnet, and have the ARPs for each interface be answered
	based on whether or not the kernel would route a packet from
	the ARP'd IP out that interface (therefore you must use source
	based routing for this to work). In other words it allows control
	of which cards (usually 1) will respond to an arp request.

	0 - (default) The kernel can respond to arp requests with addresses
	from other interfaces. This may seem wrong but it usually makes
	sense, because it increases the chance of successful communication.
	IP addresses are owned by the complete host on Linux, not by
	particular interfaces. Only for more complex setups like load-
	balancing, does this behaviour cause problems.

	arp_filter for the interface will be enabled if at least one of
	conf/{all,interface}/arp_filter is set to TRUE,
	it will be disabled otherwise</info></param><param path="/proc/sys/net/ipv4/conf/all/arp_ignore"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_ignore - INTEGER
	Define different modes for sending replies in response to
	received ARP requests that resolve local target IP addresses:
	0 - (default): reply for any local target IP address, configured
	on any interface
	1 - reply only if the target IP address is local address
	configured on the incoming interface
	2 - reply only if the target IP address is local address
	configured on the incoming interface and both with the
	sender's IP address are part from same subnet on this interface
	3 - do not reply for local addresses configured with scope host,
	only resolutions for global and link addresses are replied
	4-7 - reserved
	8 - do not reply for all local addresses

	The max value from conf/{all,interface}/arp_ignore is used
	when ARP request is received on the {interface}</info></param><param path="/proc/sys/net/ipv4/conf/all/arp_notify"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_notify - BOOLEAN
	Define mode for notification of address and device changes.
	0 - (default): do nothing
	1 - Generate gratuitous arp requests when device is brought up
	    or hardware address changes.</info></param><param path="/proc/sys/net/ipv4/conf/all/bootp_relay"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>bootp_relay - BOOLEAN
	Accept packets with source address 0.b.c.d destined
	not to this host as local ones. It is supposed, that
	BOOTP relay daemon will catch and forward such packets.
	conf/all/bootp_relay must also be set to TRUE to enable BOOTP relay
	for the interface
	default FALSE
	Not Implemented Yet.</info></param><param path="/proc/sys/net/ipv4/conf/all/disable_policy"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>disable_policy - BOOLEAN
	Disable IPSEC policy (SPD) for this interface</info></param><param path="/proc/sys/net/ipv4/conf/all/disable_xfrm"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>disable_xfrm - BOOLEAN
	Disable IPSEC encryption on this interface, whatever the policy</info></param><param locked="0" path="/proc/sys/net/ipv4/conf/all/force_igmp_version"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams></param><param locked="0" path="/proc/sys/net/ipv4/conf/all/forwarding"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>forwarding - BOOLEAN
	Enable IP forwarding on this interface.</info></param><param path="/proc/sys/net/ipv4/conf/all/log_martians"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>log_martians - BOOLEAN
	Log packets with impossible addresses to kernel log.
	log_martians for the interface will be enabled if at least one of
	conf/{all,interface}/log_martians is set to TRUE,
	it will be disabled otherwise</info></param><param path="/proc/sys/net/ipv4/conf/all/mc_forwarding"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>mc_forwarding - BOOLEAN
	Do multicast routing. The kernel needs to be compiled with CONFIG_MROUTE
	and a multicast routing daemon is required.
	conf/all/mc_forwarding must also be set to TRUE to enable multicast
	routing	for the interface</info></param><param path="/proc/sys/net/ipv4/conf/all/medium_id"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>medium_id - INTEGER
	Integer value used to differentiate the devices by the medium they
	are attached to. Two devices can have different id values when
	the broadcast packets are received only on one of them.
	The default value 0 means that the device is the only interface
	to its medium, value of -1 means that medium is not known.

	Currently, it is used to change the proxy_arp behavior:
	the proxy_arp feature is enabled for packets forwarded between
	two devices attached to different media.</info></param><param path="/proc/sys/net/ipv4/conf/all/promote_secondaries"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>promote_secondaries - BOOLEAN
	When a primary IP address is removed from this interface
	promote a corresponding secondary IP address instead of
	removing all the corresponding secondary IP addresses.</info></param><param path="/proc/sys/net/ipv4/conf/all/proxy_arp"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>proxy_arp - BOOLEAN
	Do proxy arp.
	proxy_arp for the interface will be enabled if at least one of
	conf/{all,interface}/proxy_arp is set to TRUE,
	it will be disabled otherwise</info></param><param path="/proc/sys/net/ipv4/conf/all/proxy_arp_pvlan"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>proxy_arp_pvlan - BOOLEAN
	Private VLAN proxy arp.
	Basically allow proxy arp replies back to the same interface
	(from which the ARP request/solicitation was received).

	This is done to support (ethernet) switch features, like RFC
	3069, where the individual ports are NOT allowed to
	communicate with each other, but they are allowed to talk to
	the upstream router.  As described in RFC 3069, it is possible
	to allow these hosts to communicate through the upstream
	router by proxy_arp'ing. Don't need to be used together with
	proxy_arp.

	This technology is known by different names:
	  In RFC 3069 it is called VLAN Aggregation.
	  Cisco and Allied Telesyn call it Private VLAN.
	  Hewlett-Packard call it Source-Port filtering or port-isolation.
	  Ericsson call it MAC-Forced Forwarding (RFC Draft).</info></param><param path="/proc/sys/net/ipv4/conf/all/route_localnet"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>route_localnet - BOOLEAN
	Do not consider loopback addresses as martian source or destination
	while routing. This enables the use of 127/8 for local routing purposes.
	default FALSE</info></param><param path="/proc/sys/net/ipv4/conf/all/rp_filter"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>rp_filter - INTEGER
	0 - No source validation.
	1 - Strict mode as defined in RFC3704 Strict Reverse Path
	    Each incoming packet is tested against the FIB and if the interface
	    is not the best reverse path the packet check will fail.
	    By default failed packets are discarded.
	2 - Loose mode as defined in RFC3704 Loose Reverse Path
	    Each incoming packet's source address is also tested against the FIB
	    and if the source address is not reachable via any interface
	    the packet check will fail.

	Current recommended practice in RFC3704 is to enable strict mode
	to prevent IP spoofing from DDos attacks. If using asymmetric routing
	or other complicated routing, then loose mode is recommended.

	The max value from conf/{all,interface}/rp_filter is used
	when doing source validation on the {interface}.

	Default value is 0. Note that some distributions enable it
	in startup scripts.</info></param><param path="/proc/sys/net/ipv4/conf/all/secure_redirects"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>secure_redirects - BOOLEAN
	Accept ICMP redirect messages only for gateways,
	listed in default gateway list.
	secure_redirects for the interface will be enabled if at least one of
	conf/{all,interface}/secure_redirects is set to TRUE,
	it will be disabled otherwise
	default TRUE</info></param><param path="/proc/sys/net/ipv4/conf/all/send_redirects"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>send_redirects - BOOLEAN
	Send redirects, if router.
	send_redirects for the interface will be enabled if at least one of
	conf/{all,interface}/send_redirects is set to TRUE,
	it will be disabled otherwise
	Default: TRUE</info></param><param path="/proc/sys/net/ipv4/conf/all/shared_media"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>shared_media - BOOLEAN
	Send(router) or accept(host) RFC1620 shared media redirects.
	Overrides ip_secure_redirects.
	shared_media for the interface will be enabled if at least one of
	conf/{all,interface}/shared_media is set to TRUE,
	it will be disabled otherwise
	default TRUE</info></param><param path="/proc/sys/net/ipv4/conf/all/tag"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tag - INTEGER
	Allows you to write a number, which can be used as required.
	Default value is 0.</info></param><param locked="0" path="/proc/sys/net/ipv4/conf/default/accept_local"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_local - BOOLEAN
	Accept packets with local source addresses. In combination with
	suitable routing, this can be used to direct packets between two
	local interfaces over the wire and have them accepted properly.
	default FALSE</info></param><param locked="0" path="/proc/sys/net/ipv4/conf/default/accept_redirects"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_redirects - BOOLEAN
	Accept Redirects.

	Functional default: enabled if local forwarding is disabled.
			    disabled if local forwarding is enabled.</info></param><param locked="0" path="/proc/sys/net/ipv4/conf/default/accept_source_route"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_source_route - INTEGER
	Accept source routing (routing extension header).

	&gt;= 0: Accept only routing header type 2.
	&lt; 0: Do not accept routing header.

	Default: 0</info></param><param locked="0" path="/proc/sys/net/ipv4/conf/default/arp_accept"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_accept - BOOLEAN
	Define behavior for gratuitous ARP frames who's IP is not
	already present in the ARP table:
	0 - don't create new entries in the ARP table
	1 - create new entries in the ARP table

	Both replies and requests type gratuitous arp will trigger the
	ARP table to be updated, if this setting is on.

	If the ARP table already contains the IP address of the
	gratuitous arp frame, the arp table will be updated regardless
	if this setting is on or off.</info></param><param path="/proc/sys/net/ipv4/conf/default/arp_announce"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_announce - INTEGER
	Define different restriction levels for announcing the local
	source IP address from IP packets in ARP requests sent on
	interface:
	0 - (default) Use any local address, configured on any interface
	1 - Try to avoid local addresses that are not in the target's
	subnet for this interface. This mode is useful when target
	hosts reachable via this interface require the source IP
	address in ARP requests to be part of their logical network
	configured on the receiving interface. When we generate the
	request we will check all our subnets that include the
	target IP and will preserve the source address if it is from
	such subnet. If there is no such subnet we select source
	address according to the rules for level 2.
	2 - Always use the best local address for this target.
	In this mode we ignore the source address in the IP packet
	and try to select local address that we prefer for talks with
	the target host. Such local address is selected by looking
	for primary IP addresses on all our subnets on the outgoing
	interface that include the target IP address. If no suitable
	local address is found we select the first local address
	we have on the outgoing interface or on all other interfaces,
	with the hope we will receive reply for our request and
	even sometimes no matter the source IP address we announce.

	The max value from conf/{all,interface}/arp_announce is used.

	Increasing the restriction level gives more chance for
	receiving answer from the resolved target while decreasing
	the level announces more valid sender's information.</info></param><param path="/proc/sys/net/ipv4/conf/default/arp_filter"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_filter - BOOLEAN
	1 - Allows you to have multiple network interfaces on the same
	subnet, and have the ARPs for each interface be answered
	based on whether or not the kernel would route a packet from
	the ARP'd IP out that interface (therefore you must use source
	based routing for this to work). In other words it allows control
	of which cards (usually 1) will respond to an arp request.

	0 - (default) The kernel can respond to arp requests with addresses
	from other interfaces. This may seem wrong but it usually makes
	sense, because it increases the chance of successful communication.
	IP addresses are owned by the complete host on Linux, not by
	particular interfaces. Only for more complex setups like load-
	balancing, does this behaviour cause problems.

	arp_filter for the interface will be enabled if at least one of
	conf/{all,interface}/arp_filter is set to TRUE,
	it will be disabled otherwise</info></param><param path="/proc/sys/net/ipv4/conf/default/arp_ignore"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_ignore - INTEGER
	Define different modes for sending replies in response to
	received ARP requests that resolve local target IP addresses:
	0 - (default): reply for any local target IP address, configured
	on any interface
	1 - reply only if the target IP address is local address
	configured on the incoming interface
	2 - reply only if the target IP address is local address
	configured on the incoming interface and both with the
	sender's IP address are part from same subnet on this interface
	3 - do not reply for local addresses configured with scope host,
	only resolutions for global and link addresses are replied
	4-7 - reserved
	8 - do not reply for all local addresses

	The max value from conf/{all,interface}/arp_ignore is used
	when ARP request is received on the {interface}</info></param><param path="/proc/sys/net/ipv4/conf/default/arp_notify"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>arp_notify - BOOLEAN
	Define mode for notification of address and device changes.
	0 - (default): do nothing
	1 - Generate gratuitous arp requests when device is brought up
	    or hardware address changes.</info></param><param path="/proc/sys/net/ipv4/conf/default/bootp_relay"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>bootp_relay - BOOLEAN
	Accept packets with source address 0.b.c.d destined
	not to this host as local ones. It is supposed, that
	BOOTP relay daemon will catch and forward such packets.
	conf/all/bootp_relay must also be set to TRUE to enable BOOTP relay
	for the interface
	default FALSE
	Not Implemented Yet.</info></param><param path="/proc/sys/net/ipv4/conf/default/disable_policy"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>disable_policy - BOOLEAN
	Disable IPSEC policy (SPD) for this interface</info></param><param path="/proc/sys/net/ipv4/conf/default/disable_xfrm"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>disable_xfrm - BOOLEAN
	Disable IPSEC encryption on this interface, whatever the policy</info></param><param locked="0" path="/proc/sys/net/ipv4/conf/default/forwarding"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>forwarding - BOOLEAN
	Enable IP forwarding on this interface.</info></param><param path="/proc/sys/net/ipv4/conf/default/log_martians"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>log_martians - BOOLEAN
	Log packets with impossible addresses to kernel log.
	log_martians for the interface will be enabled if at least one of
	conf/{all,interface}/log_martians is set to TRUE,
	it will be disabled otherwise</info></param><param path="/proc/sys/net/ipv4/conf/default/mc_forwarding"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>mc_forwarding - BOOLEAN
	Do multicast routing. The kernel needs to be compiled with CONFIG_MROUTE
	and a multicast routing daemon is required.
	conf/all/mc_forwarding must also be set to TRUE to enable multicast
	routing	for the interface</info></param><param path="/proc/sys/net/ipv4/conf/default/medium_id"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>medium_id - INTEGER
	Integer value used to differentiate the devices by the medium they
	are attached to. Two devices can have different id values when
	the broadcast packets are received only on one of them.
	The default value 0 means that the device is the only interface
	to its medium, value of -1 means that medium is not known.

	Currently, it is used to change the proxy_arp behavior:
	the proxy_arp feature is enabled for packets forwarded between
	two devices attached to different media.</info></param><param path="/proc/sys/net/ipv4/conf/default/promote_secondaries"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>promote_secondaries - BOOLEAN
	When a primary IP address is removed from this interface
	promote a corresponding secondary IP address instead of
	removing all the corresponding secondary IP addresses.</info></param><param path="/proc/sys/net/ipv4/conf/default/proxy_arp"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>proxy_arp - BOOLEAN
	Do proxy arp.
	proxy_arp for the interface will be enabled if at least one of
	conf/{all,interface}/proxy_arp is set to TRUE,
	it will be disabled otherwise</info></param><param path="/proc/sys/net/ipv4/conf/default/proxy_arp_pvlan"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>proxy_arp_pvlan - BOOLEAN
	Private VLAN proxy arp.
	Basically allow proxy arp replies back to the same interface
	(from which the ARP request/solicitation was received).

	This is done to support (ethernet) switch features, like RFC
	3069, where the individual ports are NOT allowed to
	communicate with each other, but they are allowed to talk to
	the upstream router.  As described in RFC 3069, it is possible
	to allow these hosts to communicate through the upstream
	router by proxy_arp'ing. Don't need to be used together with
	proxy_arp.

	This technology is known by different names:
	  In RFC 3069 it is called VLAN Aggregation.
	  Cisco and Allied Telesyn call it Private VLAN.
	  Hewlett-Packard call it Source-Port filtering or port-isolation.
	  Ericsson call it MAC-Forced Forwarding (RFC Draft).</info></param><param path="/proc/sys/net/ipv4/conf/default/route_localnet"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>route_localnet - BOOLEAN
	Do not consider loopback addresses as martian source or destination
	while routing. This enables the use of 127/8 for local routing purposes.
	default FALSE</info></param><param path="/proc/sys/net/ipv4/conf/default/rp_filter"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>rp_filter - INTEGER
	0 - No source validation.
	1 - Strict mode as defined in RFC3704 Strict Reverse Path
	    Each incoming packet is tested against the FIB and if the interface
	    is not the best reverse path the packet check will fail.
	    By default failed packets are discarded.
	2 - Loose mode as defined in RFC3704 Loose Reverse Path
	    Each incoming packet's source address is also tested against the FIB
	    and if the source address is not reachable via any interface
	    the packet check will fail.

	Current recommended practice in RFC3704 is to enable strict mode
	to prevent IP spoofing from DDos attacks. If using asymmetric routing
	or other complicated routing, then loose mode is recommended.

	The max value from conf/{all,interface}/rp_filter is used
	when doing source validation on the {interface}.

	Default value is 0. Note that some distributions enable it
	in startup scripts.</info></param><param path="/proc/sys/net/ipv4/conf/default/secure_redirects"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>secure_redirects - BOOLEAN
	Accept ICMP redirect messages only for gateways,
	listed in default gateway list.
	secure_redirects for the interface will be enabled if at least one of
	conf/{all,interface}/secure_redirects is set to TRUE,
	it will be disabled otherwise
	default TRUE</info></param><param path="/proc/sys/net/ipv4/conf/default/send_redirects"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>send_redirects - BOOLEAN
	Send redirects, if router.
	send_redirects for the interface will be enabled if at least one of
	conf/{all,interface}/send_redirects is set to TRUE,
	it will be disabled otherwise
	Default: TRUE</info></param><param path="/proc/sys/net/ipv4/conf/default/shared_media"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>shared_media - BOOLEAN
	Send(router) or accept(host) RFC1620 shared media redirects.
	Overrides ip_secure_redirects.
	shared_media for the interface will be enabled if at least one of
	conf/{all,interface}/shared_media is set to TRUE,
	it will be disabled otherwise
	default TRUE</info></param><param path="/proc/sys/net/ipv4/conf/default/tag"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>tag - INTEGER
	Allows you to write a number, which can be used as required.
	Default value is 0.</info></param><param path="/proc/sys/net/ipv4/neigh/default/app_solicit"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>app_solicit - INTEGER
	The maximum number of probes to send to the user space ARP daemon
	via netlink before dropping back to multicast probes (see
	mcast_solicit).  Defaults to 0.</info></param><param path="/proc/sys/net/ipv4/neigh/default/gc_thresh1"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>neigh/default/gc_thresh1 - INTEGER
	Minimum number of entries to keep.  Garbage collector will not
	purge entries if there are fewer than this number.
	Default: 128</info></param><param path="/proc/sys/net/ipv4/neigh/default/gc_thresh2"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>neigh/default/gc_thresh2 - INTEGER
	Threshold when garbage collector becomes more aggressive about
	purging entries. Entries older than 5 seconds will be cleared
	when over this number.
	Default: 512</info></param><param path="/proc/sys/net/ipv4/neigh/default/gc_thresh3"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>neigh/default/gc_thresh3 - INTEGER
	Maximum number of neighbor entries allowed.  Increase this
	when using large numbers of interfaces and when communicating
	with large numbers of directly-connected peers.
	Default: 1024</info></param><param path="/proc/sys/net/ipv4/neigh/default/unres_qlen"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>neigh/default/unres_qlen - INTEGER
	The maximum number of packets which may be queued for each
	unresolved address by other network layers.
	(deprecated in linux 3.3) : use unres_qlen_bytes instead.
	Prior to linux 3.3, the default value is 3 which may cause
	unexpected packet loss. The current default value is calculated
	according to default value of unres_qlen_bytes and true size of
	packet.
	Default: 31</info></param><param path="/proc/sys/net/ipv4/neigh/default/unres_qlen_bytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>neigh/default/unres_qlen_bytes - INTEGER
	The maximum number of bytes which may be used by packets
	queued for each	unresolved address by other network layers.
	(added in linux 3.3)
	Setting negative value is meaningless and will return error.
	Default: 65536 Bytes(64KB)</info></param><param path="/proc/sys/net/ipv4/route/max_size"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>route/max_size - INTEGER
	Maximum number of routes allowed in the kernel.  Increase
	this when using large numbers of interfaces and/or routes.</info></param><param path="/proc/sys/net/ipv4/route/min_adv_mss"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>min_adv_mss - INTEGER
	The advertised MSS depends on the first hop route MTU, but will
	never be lower than this setting.</info></param><param path="/proc/sys/net/ipv4/route/min_pmtu"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>min_pmtu - INTEGER
	default 552 - minimum discovered Path MTU</info></param><param path="/proc/sys/net/ipv4/route/mtu_expires"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>mtu_expires - INTEGER
	Time, in seconds, that cached PMTU information is kept.</info></param><param path="/proc/sys/net/ipv6/bindv6only"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>bindv6only - BOOLEAN
	Default value for IPV6_V6ONLY socket option,
	which restricts use of the IPv6 socket to IPv6 communication
	only.
		TRUE: disable IPv4-mapped address feature
		FALSE: enable IPv4-mapped address feature

	Default: FALSE (as specified in RFC3493)</info></param><param path="/proc/sys/net/ipv6/ip6frag_high_thresh"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip6frag_high_thresh - INTEGER
	Maximum memory used to reassemble IPv6 fragments. When
	ip6frag_high_thresh bytes of memory is allocated for this purpose,
	the fragment handler will toss packets until ip6frag_low_thresh
	is reached.</info></param><param path="/proc/sys/net/ipv6/ip6frag_low_thresh"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip6frag_low_thresh - INTEGER
	See ip6frag_high_thresh</info></param><param path="/proc/sys/net/ipv6/ip6frag_time"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ip6frag_time - INTEGER
	Time in seconds to keep an IPv6 fragment in memory.</info></param><param path="/proc/sys/net/ipv6/mld_qrv"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>mld_qrv - INTEGER
	Controls the MLD query robustness variable (see RFC3810 9.1).
	Default: 2 (as specified by RFC3810 9.1)
	Minimum: 1 (as specified by RFC6636 4.5)</info></param><param path="/proc/sys/net/ipv6/conf/all/accept_dad"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_dad - INTEGER
	Whether to accept DAD (Duplicate Address Detection).
	0: Disable DAD
	1: Enable DAD (default)
	2: Enable DAD, and disable IPv6 operation if MAC-based duplicate
	   link-local address has been found.</info></param><param path="/proc/sys/net/ipv6/conf/all/accept_ra"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_ra - INTEGER
	Accept Router Advertisements; autoconfigure using them.

	It also determines whether or not to transmit Router
	Solicitations. If and only if the functional setting is to
	accept Router Advertisements, Router Solicitations will be
	transmitted.

	Possible values are:
		0 Do not accept Router Advertisements.
		1 Accept Router Advertisements if forwarding is disabled.
		2 Overrule forwarding behaviour. Accept Router Advertisements
		  even if forwarding is enabled.

	Functional default: enabled if local forwarding is disabled.
			    disabled if local forwarding is enabled.</info></param><param path="/proc/sys/net/ipv6/conf/all/accept_ra_defrtr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_ra_defrtr - BOOLEAN
	Learn default router in Router Advertisement.

	Functional default: enabled if accept_ra is enabled.
			    disabled if accept_ra is disabled.
</info></param><param path="/proc/sys/net/ipv6/conf/all/accept_ra_pinfo"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_ra_pinfo - BOOLEAN
	Learn Prefix Information in Router Advertisement.

	Functional default: enabled if accept_ra is enabled.
			    disabled if accept_ra is disabled.</info></param><param path="/proc/sys/net/ipv6/conf/all/accept_ra_rt_info_max_plen"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_ra_rt_info_max_plen - INTEGER
	Maximum prefix length of Route Information in RA.

	Route Information w/ prefix larger than or equal to this
	variable shall be ignored.

	Functional default: 0 if accept_ra_rtr_pref is enabled.
			    -1 if accept_ra_rtr_pref is disabled.</info></param><param path="/proc/sys/net/ipv6/conf/all/accept_ra_rtr_pref"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_ra_rtr_pref - BOOLEAN
	Accept Router Preference in RA.

	Functional default: enabled if accept_ra is enabled.
			    disabled if accept_ra is disabled.</info></param><param path="/proc/sys/net/ipv6/conf/all/accept_redirects"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_redirects - BOOLEAN
	Accept Redirects.

	Functional default: enabled if local forwarding is disabled.
			    disabled if local forwarding is enabled.</info></param><param path="/proc/sys/net/ipv6/conf/all/accept_source_route"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>accept_source_route - INTEGER
	Accept source routing (routing extension header).

	&gt;= 0: Accept only routing header type 2.
	&lt; 0: Do not accept routing header.

	Default: 0</info></param><param path="/proc/sys/net/ipv6/conf/all/autoconf"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>autoconf - BOOLEAN
	Autoconfigure addresses using Prefix Information in Router
	Advertisements.

	Functional default: enabled if accept_ra_pinfo is enabled.
			    disabled if accept_ra_pinfo is disabled.</info></param><param path="/proc/sys/net/ipv6/conf/all/dad_transmits"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>dad_transmits - INTEGER
	The amount of Duplicate Address Detection probes to send.
	Default: 1</info></param><param path="/proc/sys/net/ipv6/conf/all/disable_ipv6"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>disable_ipv6 - BOOLEAN
	Disable IPv6 operation.  If accept_dad is set to 2, this value
	will be dynamically set to TRUE if DAD fails for the link-local
	address.
	Default: FALSE (enable IPv6 operation)

	When this value is changed from 1 to 0 (IPv6 is being enabled),
	it will dynamically create a link-local address on the given
	interface and start Duplicate Address Detection, if necessary.

	When this value is changed from 0 to 1 (IPv6 is being disabled),
	it will dynamically delete all address on the given interface.</info></param><param path="/proc/sys/net/ipv6/conf/all/force_mld_version"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>force_mld_version - INTEGER
	0 - (default) No enforcement of a MLD version, MLDv1 fallback allowed
	1 - Enforce to use MLD version 1
	2 - Enforce to use MLD version 2</info></param><param path="/proc/sys/net/ipv6/conf/all/force_tllao"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>force_tllao - BOOLEAN
	Enable sending the target link-layer address option even when
	responding to a unicast neighbor solicitation.
	Default: FALSE

	Quoting from RFC 2461, section 4.4, Target link-layer address:

	&quot;The option MUST be included for multicast solicitations in order to
	avoid infinite Neighbor Solicitation &quot;recursion&quot; when the peer node
	does not have a cache entry to return a Neighbor Advertisements
	message.  When responding to unicast solicitations, the option can be
	omitted since the sender of the solicitation has the correct link-
	layer address; otherwise it would not have be able to send the unicast
	solicitation in the first place. However, including the link-layer
	address in this case adds little overhead and eliminates a potential
	race condition where the sender deletes the cached link-layer address
	prior to receiving a response to a previous solicitation.&quot;</info></param><param path="/proc/sys/net/ipv6/conf/all/forwarding"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>forwarding - BOOLEAN
	Enable IP forwarding on this interface.</info></param><param path="/proc/sys/net/ipv6/conf/all/hop_limit"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>hop_limit - INTEGER
	Default Hop Limit to set.
	Default: 64</info></param><param path="/proc/sys/net/ipv6/conf/all/max_addresses"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>max_addresses - INTEGER
	Maximum number of autoconfigured addresses per interface.  Setting
	to zero disables the limitation.  It is not recommended to set this
	value too large (or to zero) because it would be an easy way to
	crash the kernel by allowing too many addresses to be created.
	Default: 16</info></param><param path="/proc/sys/net/ipv6/conf/all/max_desync_factor"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>max_desync_factor - INTEGER
	Maximum value for DESYNC_FACTOR, which is a random value
	that ensures that clients don't synchronize with each
	other and generate new addresses at exactly the same time.
	value is in seconds.
	Default: 600</info></param><param path="/proc/sys/net/ipv6/conf/all/mc_forwarding"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>mc_forwarding - BOOLEAN
	Do multicast routing. The kernel needs to be compiled with CONFIG_MROUTE
	and a multicast routing daemon is required.
	conf/all/mc_forwarding must also be set to TRUE to enable multicast
	routing	for the interface</info></param><param path="/proc/sys/net/ipv6/conf/all/mldv1_unsolicited_report_interval"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>mldv1_unsolicited_report_interval - INTEGER
	The interval in milliseconds in which the next unsolicited
	MLDv1 report retransmit will take place.
	Default: 10000 (10 seconds)</info></param><param path="/proc/sys/net/ipv6/conf/all/mldv2_unsolicited_report_interval"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>mldv2_unsolicited_report_interval - INTEGER
	The interval in milliseconds in which the next unsolicited
	MLDv2 report retransmit will take place.
	Default: 1000 (1 second)</info></param><param path="/proc/sys/net/ipv6/conf/all/mtu"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>mtu - INTEGER
	Default Maximum Transfer Unit
	Default: 1280 (IPv6 required minimum)</info></param><param path="/proc/sys/net/ipv6/conf/all/ndisc_notify"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>ndisc_notify - BOOLEAN
	Define mode for notification of address and device changes.
	0 - (default): do nothing
	1 - Generate unsolicited neighbour advertisements when device is brought
	    up or hardware address changes.</info></param><param path="/proc/sys/net/ipv6/conf/all/proxy_ndp"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>proxy_ndp - BOOLEAN
	Do proxy ndp.</info></param><param path="/proc/sys/net/ipv6/conf/all/regen_max_retry"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>regen_max_retry - INTEGER
	Number of attempts before give up attempting to generate
	valid temporary addresses.
	Default: 5</info></param><param path="/proc/sys/net/ipv6/conf/all/router_probe_interval"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>router_probe_interval - INTEGER
	Minimum interval (in seconds) between Router Probing described
	in RFC4191.

	Default: 60</info></param><param path="/proc/sys/net/ipv6/conf/all/router_solicitation_delay"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>router_solicitation_delay - INTEGER
	Number of seconds to wait after interface is brought up
	before sending Router Solicitations.
	Default: 1</info></param><param path="/proc/sys/net/ipv6/conf/all/router_solicitation_interval"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>router_solicitation_interval - INTEGER
	Number of seconds to wait between Router Solicitations.
	Default: 4</info></param><param path="/proc/sys/net/ipv6/conf/all/router_solicitations"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>router_solicitations - INTEGER
	Number of Router Solicitations to send until assuming no
	routers are present.
	Default: 3</info></param><param path="/proc/sys/net/ipv6/conf/all/temp_prefered_lft"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>temp_prefered_lft - INTEGER
	Preferred lifetime (in seconds) for temporary addresses.
	Default: 86400 (1 day)</info></param><param path="/proc/sys/net/ipv6/conf/all/temp_valid_lft"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>temp_valid_lft - INTEGER
	valid lifetime (in seconds) for temporary addresses.
	Default: 604800 (7 days)</info></param><param path="/proc/sys/net/ipv6/conf/all/use_tempaddr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>use_tempaddr - INTEGER
	Preference for Privacy Extensions (RFC3041).
	  &lt;= 0 : disable Privacy Extensions
	  == 1 : enable Privacy Extensions, but prefer public
	         addresses over temporary addresses.
	  &gt;  1 : enable Privacy Extensions and prefer temporary
	         addresses over public addresses.
	Default:  0 (for most devices)
		 -1 (for point-to-point devices and loopback devices)</info></param></params>
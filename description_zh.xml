<?xml version="1.0" encoding="utf-8"?><params>
	<param locked="0" path="/proc/sys/fs/inode-state">
		<subparams>
			
		<subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams>
		
	<info>此文件保存了三个值，前两个分别表示 已分配inode数和空闲inode数。第三个是已超出系统最大inode值的数量，此时系统需要清除排查inode列表</info></param>
	<param locked="0" path="/proc/sys/kernel/printk">
		<subparams>
			
			
		<subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/><subparam index="1" max="7" maxlen="0" min="0" name="(noname2)" type="number_range"><subinfo/></subparam></subparams>	
		
	<info>该文件有四个数字值，它们根据日志记录消息的重要性，定义将其发送到何处。按顺序是：
1.控制台日志级别：优先级高于该值的消息将被打印至控制台
2.默认的消息日志级别：将用该优先级来打印没有优先级的消息
3.最低的控制台日志级别：控制台日志级别可被设置的最小值(最高优先级)
4.默认的控制台日志级别：控制台日志级别的缺省值
数值越小，优先级越高，级别有(0~7)</info></param>
<param locked="0" path="/proc/sys/kernel/acct"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>acct功能用于系统记录进程信息，正常结束的进程都会在该文件尾添加对应的信息。异常结束是指重启或其它致命的系统问题，不能够记录永不停止的进程。该设置需要配置三个值，分别是：
1.如果文件系统可用空间高于这个百分比值，则开始记录进程信息。
2.如果文件系统可用空间低于这个百分比值，则停止记录进程信息。
3.检查上面两个值的频率(以秒为单位)。</info></param><param path="/proc/sys/kernel/auto_msgmni"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>系统自动设置同时运行的消息队列个数。
0：不自动
1：自动</info></param><param path="/proc/sys/kernel/cad_pid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>接收Ctrl-alt-del操作的INT信号的进程的PID</info></param><param path="/proc/sys/kernel/cap_last_cap"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>系统capabilities最高支持的权限等级。</info></param><param path="/proc/sys/kernel/core_pattern"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置core文件保存位置或文件名,只有文件名时，则保存在应用程序运行的目录下</info></param><param path="/proc/sys/kernel/core_pipe_limit"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>定义了可以有多少个并发的崩溃程序可以通过管道模式传递给指定的core信息收集程序。如果超过了指定数，则后续的程序将不会处理，只在内核日志中做记录。0是个特殊的值，当设置为0时，不限制并行捕捉崩溃的进程，但不会等待用户程序搜集完毕方才回收/proc/pid目录（就是说，崩溃程序的相关信息可能随时被回收，搜集的信息可能不全）。
</info></param><param locked="0" path="/proc/sys/kernel/core_uses_pid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Core文件的文件名是否添加应用程序pid做为扩展
0：不添加
1：添加
</info></param><param locked="0" path="/proc/sys/kernel/ctrl-alt-del"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>该值控制系统在接收到 ctrl+alt+delete 按键组合时如何反应：
1：不捕获ctrl-alt-del，将系统类似于直接关闭电源
0：捕获ctrl-alt-del，并将此信号传至cad_pid保存的PID号进程进行处理
</info></param><param locked="0" path="/proc/sys/kernel/dmesg_restrict"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>限制哪些用户可以查看syslog日志
0：不限制
1：只有特权用户能够查看
</info></param><param path="/proc/sys/kernel/domainname"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>网络域名(重启失效)
</info></param><param locked="0" path="/proc/sys/kernel/ftrace_dump_on_oops"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>确定是否将ftrace的缓冲区的信息打印出来，是通过printk来打印的
0：不打印
1：在系统oops时，自动dump堆栈信息到输出终端
</info></param><param path="/proc/sys/kernel/hostname"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>主机名(重启失效)
</info></param><param path="/proc/sys/kernel/hotplug"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>该文件给出了当前系统支持热插拔(hotplug)时接收热插拔事件的程序的名字（包括路径）。
</info></param><param locked="0" path="/proc/sys/kernel/hung_task_check_count"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>hung_task检查的进程数量最大值
hung_task用于检测一个进程是否在TASK_UNINTERRUPTIBLE状态过长，只有在等待IO的时候进程才会处于TASK_UNINTERRUPTIBLE状态，这个状态的进程内核不能够通过信号将其唤醒并杀死。
</info></param><param path="/proc/sys/kernel/hung_task_panic"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置hung_task发生后是否引发panic
1:触发
0：不触发
</info></param><param locked="0" path="/proc/sys/kernel/hung_task_timeout_secs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>hung_task超时时间(以秒为单位)，当一个进程在TASK_UNINTERRUPTIBLE状态超过这个时间后，会发生一个hung_task
linux会设置40%的可用内存用来做系统cache，当flush数据时这40%内存中的数据由于和IO同步问题导致超时。
</info></param><param path="/proc/sys/kernel/hung_task_warnings"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>最大产生警告数量，当发生一次hung_task时会产生一次警告，但警告数量到达此值后之后的hung_task就不会发生警告</info></param><param path="/proc/sys/kernel/kexec_load_disabled"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>表示kexec_load系统调用是否被禁止，此系统调用用于kdump。当发生了一次kexec_load后，此值会自动设置为1。
0：开启kexec_load系统调用
1：禁止kexec_load系统调用
</info></param><param path="/proc/sys/kernel/modprobe"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>该文件给出了当系统支持module时完成modprobe功能的程序的名字（包括路径）。</info></param><param path="/proc/sys/kernel/modules_disabled"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>表示是否禁止内核运行时可加载模块
0：不禁止
1：禁止</info></param><param path="/proc/sys/kernel/msgmax"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>消息队列中单个消息的最大字节数</info></param><param path="/proc/sys/kernel/msgmnb"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>单个消息队列中允许的最大字节长度(限制单个消息队列中所有消息包含的字节数之和)</info></param><param path="/proc/sys/kernel/msgmni"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>系统中同时运行的消息队列的个数</info></param><param path="/proc/sys/kernel/ngroups_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>每个用户最大的组数</info></param><param path="/proc/sys/kernel/nmi_watchdog"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>使能nmi_watchdog
0：禁止
1：开启</info></param><param locked="0" path="/proc/sys/kernel/osrelease"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>内核版本</info></param><param path="/proc/sys/kernel/ostype"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>操作系统的类型</info></param><param path="/proc/sys/kernel/overflowgid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Linux的GID为32位，但有些文件系统只支持16位的GID，此时若进行写操作会出错；当GID超过65535时会自动被转换为一个固定值，这个固定值保存在这个文件中</info></param><param path="/proc/sys/kernel/overflowuid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Linux的UID为32位，但有些文件系统只支持16位的UID，此时若进行写操作会出错；当UID超过65535时会自动被转换为一个固定值，这个固定值保存在这个文件中</info></param><param path="/proc/sys/kernel/panic"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>系统发生panic时内核重新引导之前的等待时间
0：禁止重新引导
&gt;0：重新引导前的等待时间(秒)</info></param><param path="/proc/sys/kernel/panic_on_oops"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>当系统发生oops或BUG时，所采取的措施
0：继续运行
1：让klog记录oops的输出，然后panic，若kernel.panic不为0，则等待后重新引导内核</info></param><param path="/proc/sys/kernel/panic_on_warn"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>0：只警告，不发生panic
1：发生panic</info></param><param path="/proc/sys/kernel/perf_cpu_time_max_percent"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>perf分析工具最大能够占用CPU性能的百分比
0：不限制
1~100：百分比值</info></param><param path="/proc/sys/kernel/pid_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>进程pid号的最大值</info></param><param path="/proc/sys/kernel/poweroff_cmd"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>执行关机命令的进程(包括路径)</info></param><param path="/proc/sys/kernel/powersave-nap"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>PPC专用，如果开启，则使用nap节能模式，关闭则使用doze节能模式
0：关闭
1：开启</info></param><param path="/proc/sys/kernel/printk_delay"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>printk 消息之间的延迟毫秒数，此值不可设置</info></param><param path="/proc/sys/kernel/printk_ratelimit"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>等待允许再次printk的时间(以秒为单位)，与printk_ratelimit()函数有关</info></param><param path="/proc/sys/kernel/printk_ratelimit_burst"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>printk的缓存队列长度(每个printk为一个长度，比如此值为5，而有段代码是连续printk10次，系统的处理是先printk前5次，等待printk_ratelimit秒后，再打印后面5次)</info></param><param path="/proc/sys/kernel/randomize_va_space"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>用于设置进程虚拟地址空间的随机化
0：关闭进程虚拟地址空间随机化
1：随机化进程虚拟地址空间中的mmap映射区的初始地址，栈空间的初始地址以及VDSO页的地址
2：在1的基础上加上堆区的随机化
(VDSO是用于兼容不同内核与glibc的接口的机制)</info></param><param path="/proc/sys/kernel/real-root-dev"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>根文件系统所在的设备(写入格式是0x主设备号(16位)次设备号(16位)，例如0x801，主设备号是8，次设备号是1)，只有使用initrd.img此参数才有效</info></param><param locked="0" path="/proc/sys/kernel/sched_autogroup_enabled"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>启用后，内核会创建任务组来优化桌面程序的调度。它将把占用大量资源的应用程序放在它们自己的任务组，这有助于性能提升
0：禁止
1：开启</info></param><param path="/proc/sys/kernel/sched_child_runs_first"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置保证子进程初始化完成后在父进程之前先被调度
0：先调度父进程
1：先调度子进程</info></param><param path="/proc/sys/kernel/sem"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>该文件包含4个值：
1.同一类信号的最多数量(semmsl)
2.系统中信号的最多数目，=semmni*semmsl (semmns)
3.每个semop系统调用所包含的最大的操作数(能调用的信号量的最多次数) (semopm)
4.系统中信号类型的数目的最大值，一个信号量标识符代表一个类型(semmni)</info></param><param path="/proc/sys/kernel/shmall"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>系统上可以使用的共享内存的总量（以字节为单位）。</info></param><param path="/proc/sys/kernel/shmmax"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>系统所允许的最大共享内存段的大小（以字节为单位）。</info></param><param path="/proc/sys/kernel/shmmni"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>整个系统共享内存段的最大数量。</info></param><param path="/proc/sys/kernel/shm_rmid_forced"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>强制SHM空间和一个进程联系在一起，所以可以通过杀死进程来释放内存
0：不设置
1：设置</info></param><param path="/proc/sys/kernel/softlockup_panic"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置产生softlockup时是否抛出一个panic。Softlockup用于检测CPU可以响应中断，但是在长时间内不能调度（比如禁止抢占时间太长）的死锁情况。这个机制运行在一个hrtimer的中断上下文，每隔一段时间检测一下是否发生了调度，如果过长时间没发生调度，说明系统被死锁。
0：不产生panic
1：产生panic</info></param><param path="/proc/sys/kernel/sysrq"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>该文件指定的值为非零，则激活键盘上的sysrq按键。这个按键用于给内核传递信息，用于紧急情况下重启系统。当遇到死机或者没有响应的时候，甚至连 tty 都进不去，可以尝试用 SysRq 重启计算机。</info></param><param path="/proc/sys/kernel/tainted"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>1：加载非GPL module
0：强制加载module </info></param><param path="/proc/sys/kernel/threads-max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>系统中进程数量(包括线程)的最大值</info></param><param path="/proc/sys/kernel/version"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>版本号</info></param><param path="/proc/sys/kernel/watchdog"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>表示是否禁止softlockup模式和nmi_watchdog(softlockup用于唤醒watchdog)
0：禁止
1：开启</info></param><param path="/proc/sys/kernel/watchdog_thresh"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>用于设置高精度定时器(hrtimer)、nmi事件、softlockup、hardlockup的阀值(以秒为单位)
0：不设置阀值</info></param><param path="/proc/sys/vm/admin_reserve_kbytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>给有cap_sys_admin权限的用户保留的内存数量(默认值是 min(free_page * 0.03, 8MB))</info></param><param path="/proc/sys/vm/block_dump"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>如果设置的是非零值，则会启用块I/O调试。</info></param><param path="/proc/sys/vm/dirty_background_bytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>当脏页所占的内存数量超过dirty_background_bytes时，内核的flusher线程开始回写脏页。</info></param><param path="/proc/sys/vm/dirty_background_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>当脏页所占的百分比（相对于所有可用内存，即空闲内存页+可回收内存页）达到dirty_background_ratio时，内核的flusher线程开始回写脏页数据。</info></param><param path="/proc/sys/vm/dirty_bytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>当脏页所占的内存数量达到dirty_bytes时，执行磁盘写操作的进程自己开始回写脏数据。
注意： dirty_bytes参数和 dirty_ratio参数是相对的，只能指定其中一个。当其中一个参数文件被写入时，会立即开始计算脏页限制，并且会将另一个参数的值清零</info></param><param path="/proc/sys/vm/dirty_expire_centisecs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>脏数据的过期时间，超过该时间后内核的flusher线程被唤醒时会将脏数据回写到磁盘上，单位是百分之一秒。</info></param><param path="/proc/sys/vm/dirty_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>脏页所占的百分比（相对于所有可用内存，即空闲内存页+可回收内存页）达到dirty_ratio时，执行磁盘写操作的进程会自己开始回写脏数据。</info></param><param path="/proc/sys/vm/dirty_writeback_centisecs"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置flusher内核线程唤醒的间隔，单位是百分之一秒</info></param><param path="/proc/sys/vm/drop_caches"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>写入数值可以使内核释放page_cache，dentries和inodes缓存所占的内存。
1：只释放page_cache
2：只释放dentries和inodes缓存
3：释放page_cache、dentries和inodes缓存</info></param><param path="/proc/sys/vm/hugepages_treat_as_movable"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>用来控制是否可以从ZONE_MOVABLE内存域中分配大页面。如果设置为非零，大页面可以从ZONE_MOVABLE内存域分配。ZONE_MOVABLE内存域只有在指定了kernelcore启动参数的情况下才会创建，如果没有指定kernelcore启动参数， hugepages_treat_as_movable参数则没有效果。</info></param><param path="/proc/sys/vm/hugetlb_shm_group"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>指定组ID，拥有该gid的用户可以使用大页创建SysV共享内存段</info></param><param path="/proc/sys/vm/laptop_mode"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置开启laptop mode，此模式主要是通过降低硬盘的转速来延长电池的续航时间。
0：关闭
1：启动</info></param><param path="/proc/sys/vm/legacy_va_layout"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>进程地址空间内存布局模式
0：经典布局
1：新布局
对于64位系统，默认采用经典布局</info></param><param path="/proc/sys/vm/lowmem_reserve_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>决定了内核保护这些低端内存域的强度。预留的内存值和lowmem_reserve_ratio数组中的值是倒数关系，如果值是256，则代表1/256，即为0.39%的zone内存大小。如果想要预留更多页，应该设更小一点的值。</info></param><param path="/proc/sys/vm/max_map_count"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>定义了一个进程能拥有的最多的内存区域</info></param><param path="/proc/sys/vm/memory_failure_early_kill"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>控制发生某个内核无法处理的内存错误发生的时候，如何去杀掉这个进程。当这些错误页有swap镜像的时候，内核会很好的处理这个错误，不会影响任何应用程序，但是如果没有的话，内核会把进程杀掉，避免内存错误的扩大
1：在发现内存错误的时候，就会把所有拥有此内存页的进程都杀掉
0：只是对这部分页进行unmap，然后把第一个试图进入这个页的进程杀掉</info></param><param path="/proc/sys/vm/memory_failure_recovery"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>是否开启内存错误恢复机制
1：开启
0：一旦出现内存错误，就panic</info></param><param path="/proc/sys/vm/min_free_kbytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>每个内存区保留的内存大小(以KB计算)</info></param><param path="/proc/sys/vm/min_slab_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>只在numa架构上使用，如果一个内存域中可以回收的slab页面所占的百分比（应该是相对于当前内存域的所有页面）超过min_slab_ratio，在回收区的slabs会被回收。这样可以确保即使在很少执行全局回收的NUMA系统中，slab的增长也是可控的。</info></param><param path="/proc/sys/vm/min_unmapped_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>只有在当前内存域中处于zone_reclaim_mode允许回收状态的内存页所占的百分比超过min_unmapped_ratio时，内存域才会执行回收操作。</info></param><param path="/proc/sys/vm/mmap_min_addr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>指定用户进程通过mmap可使用的最小虚拟内存地址，以避免其在低地址空间产生映射导致安全问题；如果非0，则不允许mmap到NULL页，而此功能可在出现NULL指针时调试Kernel；mmap用于将文件映射至内存；
该设置意味着禁止用户进程访问low 4k地址空间</info></param><param path="/proc/sys/vm/nr_pdflush_threads"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>当前正在运行的pdflush线程的数量</info></param><param path="/proc/sys/vm/numa_zonelist_order"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置内核选择zonelist的模式：
0：让内核智能选择使用Node或Zone方式的zonelist
1：选择Node方式的zonelist，Node(0) ZONE_NORMAL -&gt; Node(0) ZONE_DMA -&gt; Node(1) ZONE_NORMAL
2：选择Zone方式的，Node(0) ZONE_NORMAL -&gt; Node(1) ZONE_NORMAL -&gt; Node(0) ZONE_DMA</info></param><param path="/proc/sys/vm/oom_dump_tasks"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>如果启用，在内核执行OOM-killing时会打印系统内进程的信息（不包括内核线程），信息包括pid、uid、tgid、vm size、rss、nr_ptes，swapents，oom_score_adj和进程名称。这些信息可以帮助找出为什么OOM killer被执行，找到导致OOM的进程，以及了解为什么进程会被选中。
0：不打印系统内进程信息
1：打印系统内进程信息</info></param><param path="/proc/sys/vm/oom_kill_allocating_task"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>决定在oom的时候，oom killer杀哪些进程
非0：它会扫描进程队列，然后将可能导致内存溢出的进程杀掉，也就是占用内存最大的进程
0：它只杀掉导致oom的那个进程，避免了进程队列的扫描，但是释放的内存大小有限</info></param><param path="/proc/sys/vm/overcommit_kbytes"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>内存可过量分配的数量(单位为KB)</info></param><param path="/proc/sys/vm/overcommit_memory"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>是否允许内存的过量分配，允许进程分配比它实际使用的更多的内存。
0：当用户申请内存的时候，内核会去检查是否有这么大的内存空间，当超过地址空间会被拒绝
1：内核始终认为，有足够大的内存空间，直到它用完了位置
2：内核禁止任何形式的过量分配内存
Memory allocation limit = swapspace + physmem * (overcommit_ratio / 100)</info></param><param path="/proc/sys/vm/overcommit_ratio"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>内存可过量分配的百分比。</info></param><param path="/proc/sys/vm/page-cluster"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>参数控制一次写入或读出swap分区的页面数量。它是一个对数值，如果设置为0，表示1页；如果设置为1，表示2页；如果设置为2，则表示4页。如果设置为0，则表示完全禁止预读取。</info></param><param path="/proc/sys/vm/panic_on_oom"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>用于控制如何处理out-of-memory，可选值包括0/1/2
0：当内存不足时内核调用OOM killer杀死一些rogue进程，每个进程描述符都有一个oom_score标示，oom killer会选择oom_score较大的进程
1：发生了OOM以后，如果有mempolicy/cpusets的进程限制，而这些nodes导致了内存问题的时候，OOM Killer会干掉这些中的一个，系统也会恢复
2：OOM后必然panic</info></param><param path="/proc/sys/vm/percpu_pagelist_fraction"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>每个CPU能从每个zone所能分配到的pages的最大值(单位每个zone的1/X)，0为不限制</info></param><param path="/proc/sys/vm/stat_interval"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>VM信息更新频率(以秒为单位)</info></param><param path="/proc/sys/vm/swappiness"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>该值越高则linux越倾向于将部分长期没有用到的页swap，即便有足够空余物理内存(1~100)</info></param><param path="/proc/sys/vm/vfs_cache_pressure"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>表示内核回收用于directory和inode cache内存的倾向；缺省值100表示内核将根据pagecache和swapcache，把directory和inode cache保持在一个合理的百分比；降低该值低于100，将导致内核倾向于保留directory和inode cache；增加该值超过100，将导致内核倾向于回收directory和inode cache</info></param><param path="/proc/sys/vm/zone_reclaim_mode"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>参数只有在启用CONFIG_NUMA选项时才有效,zone_reclaim_mode用来控制在内存域OOM时，如何来回收内存。
0：禁止内存域回收，从其他zone分配内存
1：启用内存域回收
2：通过回写脏页回收内存
4：通过swap回收内存</info></param><param path="/proc/sys/fs/aio-max-nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>最大允许aio请求数量(会涉及到数据库的aio请求)</info></param><param path="/proc/sys/fs/aio-nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>当前aio请求数量</info></param><param path="/proc/sys/fs/dentry-state"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>保存目录缓存的状态，保存有六个值，只有前三个有效
nr_dentry：当前已经分配的目录项数量
nr_unused：还没有使用的目录项数量
age_limit：当内存紧缺时，延迟多少秒后会回收目录项所占内存</info></param><param path="/proc/sys/fs/dir-notify-enable"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置是否启用dnotify，已被inotify取代，因为dnotify 需要您为每个打算监控是否发生改变的目录打开一个文件描述符。当同时监控多个目录时，这会消耗大量的资源，因为有可能达到每个进程的文件描述符限制。并且不允许卸载（unmount）支持的设备
0：不使用
1：使用</info></param><param path="/proc/sys/fs/file-max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>系统中所有进程能够同时打开的文件句柄数量</info></param><param path="/proc/sys/fs/file-nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>此文件中保存了三个值，分别是：系统中已分配的文件句柄数量    已分配但没有使用的文件句柄数量    最大的文件句柄号</info></param><param path="/proc/sys/fs/inode-nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>此文件保存了两个值，是：已分配inode数    空闲inode数</info></param><param path="/proc/sys/fs/lease-break-time"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>当进程尝试打开一个被租借锁保护的文件时，该进程会被阻塞，同时，在一定时间内拥有该文件租借锁的进程会收到一个信号。收到信号之后，拥有该文件租借锁的进程会首先更新文件，从而保证了文件内容的一致性，接着，该进程释放这个租借锁。如果拥有租借锁的进程在一定的时间间隔内没有完成工作，内核就会自动删除这个租借锁或者将该锁进行降级，从而允许被阻塞的进程继续工作。
此保存租借锁的超时时间(以秒为单位)</info></param><param path="/proc/sys/fs/leases-enable"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>是否启用文件的租借锁
1：启用
0：不启用</info></param><param path="/proc/sys/fs/nr_open"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>一个进程最多同时打开的文件句柄数量</info></param><param path="/proc/sys/fs/overflowgid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Linux的GID为32位，但有些文件系统只支持16位的GID，此时若进行写操作会出错；当GID超过65535时会自动被转换为一个固定值，这个固定值保存在这个文件中</info></param><param path="/proc/sys/fs/overflowuid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>Linux的UID为32位，但有些文件系统只支持16位的UID，此时若进行写操作会出错；当UID超过65535时会自动被转换为一个固定值，这个固定值保存在这个文件中</info></param><param path="/proc/sys/fs/pipe-max-size"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>此文件限制非特权程序使用pipe时的缓存最大大小(以字节为单位，最小设置为4096)</info></param><param path="/proc/sys/fs/protected_hardlinks"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>用于限制普通用户建立硬链接
0：不限制用户建立硬链接
1：限制，如果文件不属于用户，或者用户对此用户没有读写权限，则不能建立硬链接</info></param><param path="/proc/sys/fs/protected_symlinks"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>用于限制普通用户建立软链接
0：不限制用户建立软链接
1：限制，允许用户建立软连接的情况是 软连接所在目录是全局可读写目录或者软连接的uid与跟从者的uid匹配，又或者目录所有者与软连接所有者匹配</info></param><param path="/proc/sys/crypto/fips_enabled"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>决定是否启用了 FIPS。如果启用了该模式，则无法在使用摘要算法 5（MD5）或者数据加密标准（DES）算法的加密字符串中使用。
0：不启用
1：启用</info></param><param path="/proc/sys/kernel/pty/max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>所能分配的PTY的最多个数(pty为虚拟终端，用于远程连接时)</info></param><param path="/proc/sys/kernel/pty/nr"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>当前分配的pty的个数</info></param><param path="/proc/sys/kernel/random/boot_id"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>此文件是个只读文件，包含了一个随机字符串，在系统启动的时候会自动生成这个uuid</info></param><param path="/proc/sys/kernel/random/entropy_avail"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>此文件是个只读文件，给出了一个有效的熵(4096位)</info></param><param path="/proc/sys/kernel/random/poolsize"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>熵池大小，一般是4096位，可以改成任何大小</info></param><param path="/proc/sys/kernel/random/read_wakeup_threshold"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>该文件保存熵的长度，该长度用于唤醒因读取/dev/random设备而待机的进程(random设备的读缓冲区长度？)</info></param><param path="/proc/sys/kernel/random/uuid"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>此文件是个只读文件，包含了一个随机字符串，在random设备每次被读的时候生成</info></param><param path="/proc/sys/kernel/random/write_wakeup_threshold"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>该文件保存熵的长度，该长度用于唤醒因写入/dev/random设备而待机的进程(random设备的写缓冲区长度？)</info></param><param path="/proc/sys/fs/binfmt_misc/status"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置binfmt_misc开启
0：禁止
1：开启</info></param><param path="/proc/sys/fs/epoll/max_user_watches"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>IO复用epoll监听文件句柄的数量最大值</info></param><param path="/proc/sys/fs/inotify/max_queued_events"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>inotify用于监控文件系统事件
该文件中的值为调用inotify_init函数时分配给inotify队列的事件数目的最大值，超出这个值得事件被丢弃，但会触发IN_Q_OVERFLOW事件
文件系统变化越频繁，这个值就应该越大 </info></param><param path="/proc/sys/fs/inotify/max_user_instances"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置每个用户可以运行的inotifywait或inotifywatch命令的进程数。</info></param><param path="/proc/sys/fs/inotify/max_user_watches"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>设置inotifywait或inotifywatch命令可以监视的文件数量(单进程)。</info></param><param locked="0" path="/proc/sys/fs/mqueue/msg_default"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>POSIX的消息队列
此文件保存一个消息队列中消息数量的默认值，如果此值超过msg_max，则会被设置为msg_max</info></param><param path="/proc/sys/fs/mqueue/msg_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>一个消息队列的最大消息数</info></param><param locked="0" path="/proc/sys/fs/mqueue/msgsize_default"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>消息队列中一个消息的默认大小(以字节为单位)</info></param><param path="/proc/sys/fs/mqueue/queues_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>系统中允许的消息队列的最大数量</info></param><param path="/proc/sys/fs/mqueue/msgsize_max"><subparams><subparam index="0" max="0" maxlen="0" min="0" name="" type="string"/></subparams><info>消息队列中一个消息的最大大小(以字节为单位)</info></param></params>